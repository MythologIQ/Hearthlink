#!/usr/bin/env python3\n\"\"\"\nIntegrated API Service\nCombines settings, Claude Code CLI, and LLM connections\n\"\"\"\n\nimport json\nimport os\nimport time\nfrom pathlib import Path\nfrom flask import Flask, jsonify, request\nfrom flask_cors import CORS\n\n# Import our modules\nfrom settings_api import load_settings, save_settings\nfrom claude_code_cli import ClaudeCodeCLI\nfrom llm_connector import LLMConnector\nfrom synapse_connector import SynapseConnector\n\napp = Flask(__name__)\nCORS(app)\n\n# Initialize services\nclaude_code_cli = ClaudeCodeCLI()\nllm_connector = LLMConnector()\nsynapse_connector = SynapseConnector()\n\n# Service status tracking\nservice_status = {\n    'claude_code': False,\n    'ollama': False,\n    'google_ai': False,\n    'settings': True\n}\n\n@app.route('/api/status', methods=['GET'])\ndef get_service_status():\n    \"\"\"Get overall service status\"\"\"\n    # Update service status\n    service_status['claude_code'] = claude_code_cli.is_available()\n    service_status['ollama'] = llm_connector.connected\n    service_status['google_ai'] = synapse_connector.google_ai_connected\n    \n    return jsonify({\n        'services': service_status,\n        'timestamp': time.time(),\n        'ready': any(service_status.values())\n    })\n\n# Settings endpoints\n@app.route('/api/settings', methods=['GET'])\ndef get_settings():\n    \"\"\"Get current settings\"\"\"\n    settings = load_settings()\n    return jsonify(settings)\n\n@app.route('/api/settings', methods=['POST'])\ndef update_settings():\n    \"\"\"Update settings\"\"\"\n    try:\n        new_settings = request.json\n        \n        # Update service configurations based on new settings\n        if 'apis' in new_settings:\n            apis = new_settings['apis']\n            \n            # Update Claude Code CLI path\n            if 'claudeCodePath' in apis and apis['claudeCodePath']:\n                claude_code_cli.cli_path = apis['claudeCodePath']\n            \n            # Update Ollama URL\n            if 'ollamaUrl' in apis:\n                llm_connector.ollama_url = apis['ollamaUrl']\n            \n            # Update Google AI key\n            if 'googleAiKey' in apis:\n                synapse_connector.google_ai_key = apis['googleAiKey']\n        \n        if save_settings(new_settings):\n            return jsonify({'success': True, 'message': 'Settings saved successfully'})\n        else:\n            return jsonify({'success': False, 'message': 'Failed to save settings'}), 500\n    except Exception as e:\n        return jsonify({'success': False, 'message': str(e)}), 500\n\n# Claude Code CLI endpoints\n@app.route('/api/claude-code/status', methods=['GET'])\ndef claude_code_status():\n    \"\"\"Get Claude Code CLI status\"\"\"\n    return jsonify(claude_code_cli.get_status())\n\n@app.route('/api/claude-code/session/start', methods=['POST'])\ndef start_claude_code_session():\n    \"\"\"Start a new Claude Code session\"\"\"\n    data = request.json or {}\n    project_path = data.get('project_path')\n    \n    success = claude_code_cli.start_session(project_path)\n    return jsonify({\n        'success': success,\n        'session': claude_code_cli.get_current_session()\n    })\n\n@app.route('/api/claude-code/session/end', methods=['POST'])\ndef end_claude_code_session():\n    \"\"\"End current Claude Code session\"\"\"\n    result = claude_code_cli.end_session()\n    return jsonify(result)\n\n@app.route('/api/claude-code/execute', methods=['POST'])\ndef execute_claude_code_command():\n    \"\"\"Execute a Claude Code command\"\"\"\n    data = request.json\n    command = data.get('command')\n    context = data.get('context', {})\n    \n    if not command:\n        return jsonify({'success': False, 'error': 'No command provided'}), 400\n    \n    result = claude_code_cli.execute_command(command, context)\n    return jsonify(result)\n\n@app.route('/api/claude-code/analyze', methods=['POST'])\ndef analyze_code():\n    \"\"\"Analyze code using Claude Code\"\"\"\n    data = request.json\n    file_path = data.get('file_path')\n    analysis_type = data.get('analysis_type', 'general')\n    \n    if not file_path:\n        return jsonify({'success': False, 'error': 'No file path provided'}), 400\n    \n    result = claude_code_cli.analyze_code(file_path, analysis_type)\n    return jsonify(result)\n\n@app.route('/api/claude-code/generate', methods=['POST'])\ndef generate_code():\n    \"\"\"Generate code using Claude Code\"\"\"\n    data = request.json\n    prompt = data.get('prompt')\n    file_path = data.get('file_path')\n    language = data.get('language')\n    \n    if not prompt:\n        return jsonify({'success': False, 'error': 'No prompt provided'}), 400\n    \n    result = claude_code_cli.generate_code(prompt, file_path, language)\n    return jsonify(result)\n\n@app.route('/api/claude-code/refactor', methods=['POST'])\ndef refactor_code():\n    \"\"\"Refactor code using Claude Code\"\"\"\n    data = request.json\n    file_path = data.get('file_path')\n    refactor_type = data.get('refactor_type')\n    target = data.get('target')\n    \n    if not file_path or not refactor_type:\n        return jsonify({'success': False, 'error': 'File path and refactor type required'}), 400\n    \n    result = claude_code_cli.refactor_code(file_path, refactor_type, target)\n    return jsonify(result)\n\n@app.route('/api/claude-code/explain', methods=['POST'])\ndef explain_code():\n    \"\"\"Explain code using Claude Code\"\"\"\n    data = request.json\n    file_path = data.get('file_path')\n    line_range = data.get('line_range')\n    \n    if not file_path:\n        return jsonify({'success': False, 'error': 'No file path provided'}), 400\n    \n    result = claude_code_cli.explain_code(file_path, line_range)\n    return jsonify(result)\n\n@app.route('/api/claude-code/debug', methods=['POST'])\ndef debug_code():\n    \"\"\"Debug code using Claude Code\"\"\"\n    data = request.json\n    file_path = data.get('file_path')\n    error_message = data.get('error_message')\n    \n    if not file_path:\n        return jsonify({'success': False, 'error': 'No file path provided'}), 400\n    \n    result = claude_code_cli.debug_code(file_path, error_message)\n    return jsonify(result)\n\n@app.route('/api/claude-code/history', methods=['GET'])\ndef get_claude_code_history():\n    \"\"\"Get Claude Code session history\"\"\"\n    return jsonify({\n        'session_history': claude_code_cli.get_session_history(),\n        'current_session': claude_code_cli.get_current_session()\n    })\n\n# LLM endpoints\n@app.route('/api/llm/status', methods=['GET'])\ndef llm_status():\n    \"\"\"Get LLM connector status\"\"\"\n    return jsonify(llm_connector.get_status())\n\n@app.route('/api/llm/connect', methods=['POST'])\ndef connect_llm():\n    \"\"\"Connect to LLM service\"\"\"\n    try:\n        connected = llm_connector.check_ollama_connection()\n        return jsonify({\n            'success': connected,\n            'status': llm_connector.get_status()\n        })\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/llm/models', methods=['GET'])\ndef get_llm_models():\n    \"\"\"Get available LLM models\"\"\"\n    return jsonify({\n        'models': llm_connector.available_models,\n        'connected': llm_connector.connected\n    })\n\n@app.route('/api/llm/generate', methods=['POST'])\ndef generate_llm_response():\n    \"\"\"Generate response using LLM\"\"\"\n    data = request.json\n    model = data.get('model', 'llama2')\n    prompt = data.get('prompt')\n    \n    if not prompt:\n        return jsonify({'success': False, 'error': 'No prompt provided'}), 400\n    \n    try:\n        response = llm_connector.generate_response(model, prompt)\n        return jsonify({\n            'success': response is not None,\n            'response': response,\n            'model': model\n        })\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n# Synapse endpoints\n@app.route('/api/synapse/status', methods=['GET'])\ndef synapse_status():\n    \"\"\"Get Synapse connector status\"\"\"\n    return jsonify(synapse_connector.get_connection_status())\n\n@app.route('/api/synapse/connect', methods=['POST'])\ndef connect_synapse():\n    \"\"\"Connect to Synapse services\"\"\"\n    try:\n        data = request.json or {}\n        claude_key = data.get('claude_key')\n        google_key = data.get('google_key')\n        \n        connected = synapse_connector.setup_api_keys(claude_key, google_key)\n        return jsonify({\n            'success': connected,\n            'status': synapse_connector.get_connection_status()\n        })\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/synapse/generate', methods=['POST'])\ndef generate_synapse_response():\n    \"\"\"Generate response using Synapse services\"\"\"\n    data = request.json\n    service = data.get('service', 'google-ai')  # 'google-ai' or 'claude'\n    prompt = data.get('prompt')\n    model = data.get('model')\n    \n    if not prompt:\n        return jsonify({'success': False, 'error': 'No prompt provided'}), 400\n    \n    try:\n        if service == 'google-ai':\n            response = synapse_connector.call_google_ai_api(prompt, model)\n        elif service == 'claude':\n            response = synapse_connector.call_claude_api(prompt, model)\n        else:\n            return jsonify({'success': False, 'error': 'Invalid service'}), 400\n        \n        return jsonify({\n            'success': response is not None,\n            'response': response,\n            'service': service,\n            'model': model\n        })\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n# Project Command delegation endpoints\n@app.route('/api/project/delegate', methods=['POST'])\ndef delegate_task():\n    \"\"\"Delegate a task to appropriate service\"\"\"\n    data = request.json\n    task_type = data.get('task_type')\n    task_description = data.get('task_description')\n    context = data.get('context', {})\n    \n    if not task_type or not task_description:\n        return jsonify({'success': False, 'error': 'Task type and description required'}), 400\n    \n    # Route task to appropriate service\n    result = None\n    \n    if task_type == 'code_analysis':\n        if claude_code_cli.is_available():\n            result = claude_code_cli.analyze_code(\n                context.get('file_path', ''),\n                context.get('analysis_type', 'general')\n            )\n    elif task_type == 'code_generation':\n        if claude_code_cli.is_available():\n            result = claude_code_cli.generate_code(\n                task_description,\n                context.get('file_path'),\n                context.get('language')\n            )\n    elif task_type == 'ai_response':\n        # Try services in order of preference\n        if synapse_connector.google_ai_connected:\n            response = synapse_connector.call_google_ai_api(task_description)\n            result = {'success': response is not None, 'response': response}\n        elif llm_connector.connected:\n            response = llm_connector.generate_response('llama2', task_description)\n            result = {'success': response is not None, 'response': response}\n    \n    if result:\n        return jsonify(result)\n    else:\n        return jsonify({\n            'success': False,\n            'error': 'No suitable service available for this task type'\n        })\n\n@app.route('/api/project/services', methods=['GET'])\ndef get_available_services():\n    \"\"\"Get available services for task delegation\"\"\"\n    return jsonify({\n        'claude_code': {\n            'available': claude_code_cli.is_available(),\n            'capabilities': ['analyze', 'generate', 'refactor', 'explain', 'debug']\n        },\n        'ollama': {\n            'available': llm_connector.connected,\n            'capabilities': ['generate', 'chat', 'summarize']\n        },\n        'google_ai': {\n            'available': synapse_connector.google_ai_connected,\n            'capabilities': ['generate', 'chat', 'analyze']\n        }\n    })\n\n# Initialize services on startup\ndef initialize_services():\n    \"\"\"Initialize all services\"\"\"\n    print(\"Initializing integrated services...\")\n    \n    # Load settings\n    settings = load_settings()\n    \n    # Initialize Claude Code CLI\n    if 'apis' in settings and 'claudeCodePath' in settings['apis']:\n        claude_code_cli.cli_path = settings['apis']['claudeCodePath']\n    \n    # Initialize LLM connector\n    if 'apis' in settings and 'ollamaUrl' in settings['apis']:\n        llm_connector.ollama_url = settings['apis']['ollamaUrl']\n    \n    # Initialize Synapse connector\n    if 'apis' in settings and 'googleAiKey' in settings['apis']:\n        synapse_connector.google_ai_key = settings['apis']['googleAiKey']\n    \n    # Test connections\n    service_status['claude_code'] = claude_code_cli.is_available()\n    service_status['ollama'] = llm_connector.check_ollama_connection()\n    service_status['google_ai'] = synapse_connector.test_google_ai_connection()\n    \n    print(f\"Services initialized: {service_status}\")\n\nif __name__ == '__main__':\n    initialize_services()\n    \n    print(\"\\nStarting Hearthlink Integrated API...\")\n    print(\"Endpoints available:\")\n    print(\"  GET  /api/status - Overall service status\")\n    print(\"  GET  /api/settings - Get/update settings\")\n    print(\"  POST /api/claude-code/* - Claude Code CLI operations\")\n    print(\"  GET  /api/llm/* - LLM operations\")\n    print(\"  GET  /api/synapse/* - Synapse operations\")\n    print(\"  POST /api/project/delegate - Task delegation\")\n    print(\"\\nStarting server on port 8003...\")\n    app.run(host='0.0.0.0', port=8003, debug=True)"