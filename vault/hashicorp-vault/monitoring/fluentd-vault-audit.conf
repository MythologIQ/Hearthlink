# Fluentd Configuration for Vault Audit Log Forwarding
# Processes Vault audit logs and forwards to centralized logging

<source>
  @type tail
  @id vault_audit_logs
  path /opt/hearthlink/vault/logs/vault_audit.log
  pos_file /var/log/fluentd/vault_audit.log.pos
  tag vault.audit
  format json
  time_key time
  time_format %Y-%m-%dT%H:%M:%S.%NZ
  refresh_interval 5s
  read_from_head true
  
  <parse>
    @type json
    time_key time
    time_type string
    time_format %Y-%m-%dT%H:%M:%S.%NZ
    keep_time_key true
  </parse>
</source>

<source>
  @type tail
  @id vault_server_logs
  path /opt/hearthlink/vault/logs/vault.log
  pos_file /var/log/fluentd/vault_server.log.pos
  tag vault.server
  format json
  time_key "@timestamp"
  time_format %Y-%m-%dT%H:%M:%S.%NZ
  refresh_interval 5s
  read_from_head true
  
  <parse>
    @type json
    time_key "@timestamp"
    time_type string
    time_format %Y-%m-%dT%H:%M:%S.%NZ
    keep_time_key true
  </parse>
</source>

<source>
  @type tail
  @id vault_key_rotation_logs
  path /opt/hearthlink/vault/logs/key-rotation.log
  pos_file /var/log/fluentd/vault_key_rotation.log.pos
  tag vault.key_rotation
  format /^\[(?<timestamp>[^\]]*)\] (?<level>\w+): (?<message>.*)/
  time_key timestamp
  time_format %Y-%m-%d %H:%M:%S
  refresh_interval 10s
</source>

# Filter and enrich Vault audit logs
<filter vault.audit>
  @type record_transformer
  @id vault_audit_enrichment
  enable_ruby true
  
  <record>
    service "vault"
    environment "production"
    log_type "audit"
    severity ${record["type"] == "response" && record["error"] ? "error" : "info"}
    
    # Extract key fields for easier querying
    vault_operation ${record["request"] ? record["request"]["operation"] : "unknown"}
    vault_path ${record["request"] ? record["request"]["path"] : "unknown"}
    vault_client_ip ${record["request"] ? record["request"]["remote_address"] : "unknown"}
    vault_namespace ${record["request"] ? record["request"]["namespace"] : "root"}
    
    # Security-relevant fields
    auth_method ${record["auth"] ? record["auth"]["accessor"] : "none"}
    token_accessor ${record["auth"] ? record["auth"]["token_accessor"] : "none"}
    policy_names ${record["auth"] ? record["auth"]["policies"] : []}
    
    # Response information
    response_status ${record["response"] ? "success" : record["error"] ? "error" : "unknown"}
    response_time_ms ${record["request"] && record["response"] ? 
                      ((Time.parse(record["response"]["time"]) - Time.parse(record["request"]["time"])) * 1000).round(2) : 0}
  </record>
  
  # Remove sensitive data
  remove_keys auth.client_token,request.client_token,response.auth.client_token
</filter>

# Filter Vault server logs for errors and warnings
<filter vault.server>
  @type grep
  @id vault_server_filter
  
  <regexp>
    key level
    pattern ^(ERROR|WARN|FATAL)$
  </regexp>
</filter>

# Enhance server logs
<filter vault.server>
  @type record_transformer
  @id vault_server_enrichment
  
  <record>
    service "vault"
    environment "production"
    log_type "server"
    severity ${record["level"].downcase}
  </record>
</filter>

# Parse key rotation logs
<filter vault.key_rotation>
  @type record_transformer
  @id vault_key_rotation_enrichment
  
  <record>
    service "vault"
    environment "production"
    log_type "key_rotation"
    severity ${record["level"].downcase}
    component "key_rotation_daemon"
  </record>
</filter>

# Security alert detection
<filter vault.audit>
  @type grep
  @id vault_security_alerts
  
  <regexp>
    key vault_operation
    pattern ^(delete|update)$
  </regexp>
  
  <regexp>
    key vault_path
    pattern ^(sys/|auth/|secret/)
  </regexp>
</filter>

# Forward security alerts to dedicated stream
<match vault.audit>
  @type copy
  
  <store>
    @type relabel
    @label @SECURITY_ALERTS
  </store>
  
  <store>
    @type relabel  
    @label @NORMAL_LOGS
  </store>
</match>

<label @SECURITY_ALERTS>
  # High-priority security events
  <filter vault.audit>
    @type grep
    @id vault_critical_security
    
    <or>
      <regexp>
        key vault_path
        pattern ^sys/(seal|unseal|step-down|leader|rotate)
      </regexp>
      <regexp>
        key vault_path
        pattern ^auth/token/create-orphan
      </regexp>
      <regexp>
        key message
        pattern (root|admin|sudo)
      </regexp>
    </or>
  </filter>
  
  <match vault.audit>
    @type forward
    @id vault_security_forward
    
    <server>
      host siem.hearthlink.local
      port 24224
    </server>
    
    <buffer tag>
      @type file
      path /var/log/fluentd/buffer/vault_security
      flush_mode interval
      flush_interval 10s
      chunk_limit_size 32MB
      queue_limit_length 128
      retry_type exponential_backoff
      retry_wait 1s
      retry_max_times 5
      retry_timeout 1h
    </buffer>
    
    <format>
      @type json
    </format>
  </match>
</label>

<label @NORMAL_LOGS>
  # Standard log processing and forwarding
  <match vault.**>
    @type copy
    
    # Forward to centralized logging (ELK Stack)
    <store>
      @type elasticsearch
      @id vault_elasticsearch
      host elasticsearch.hearthlink.local
      port 9200
      scheme https
      ssl_verify false
      
      index_name vault-logs
      type_name _doc
      
      <buffer tag,time>
        @type file
        path /var/log/fluentd/buffer/vault_elasticsearch
        timekey 3600  # 1 hour chunks
        timekey_wait 10m
        timekey_use_utc true
        chunk_limit_size 32MB
        queue_limit_length 64
        flush_mode interval
        flush_interval 30s
        retry_type exponential_backoff
        retry_wait 2s
        retry_max_times 3
        retry_timeout 30m
      </buffer>
      
      <format>
        @type json
      </format>
    </store>
    
    # Forward to Splunk (if available)
    <store>
      @type splunk_hec
      @id vault_splunk
      protocol https
      hec_host splunk.hearthlink.local
      hec_port 8088
      hec_token "#{ENV['SPLUNK_HEC_TOKEN']}"
      
      index vault
      source vault_audit_logs
      sourcetype vault:audit
      
      <buffer>
        @type memory
        flush_mode interval
        flush_interval 30s
        chunk_limit_size 8MB
        queue_limit_length 32
        retry_type exponential_backoff
        retry_wait 1s
        retry_max_times 3
      </buffer>
      
      <format>
        @type json
      </format>
    </store>
    
    # Local backup storage
    <store>
      @type file
      @id vault_file_backup
      path /var/log/hearthlink/vault-audit-backup/vault.%Y%m%d
      append true
      time_slice_format %Y%m%d
      time_slice_wait 10m
      time_format %Y%m%d%H%M%S
      
      <buffer time>
        @type file
        path /var/log/fluentd/buffer/vault_backup
        timekey 86400  # 1 day
        timekey_wait 1h
        flush_mode interval
        flush_interval 300s
      </buffer>
      
      <format>
        @type json
      </format>
    </store>
  </match>
</label>

# Metrics collection for Vault logs
<source>
  @type prometheus
  @id vault_log_metrics
  bind 0.0.0.0
  port 24231
  metrics_path /metrics
</source>

<source>
  @type prometheus_monitor
  @id vault_fluentd_monitor
  
  <labels>
    service vault
    component fluentd
  </labels>
</source>

# Health check endpoint
<source>
  @type http
  @id vault_fluentd_health
  bind 0.0.0.0
  port 9880
  cors_allow_origins ["*"]
  
  <transport tls>
    cert_path /etc/ssl/certs/fluentd.crt
    private_key_path /etc/ssl/private/fluentd.key
  </transport>
</source>

# System resource monitoring
<source>
  @type systemd
  @id vault_systemd_logs
  matches [{ "_SYSTEMD_UNIT": "hearthlink-vault.service" }]
  read_from_head true
  tag systemd.vault
  
  <storage>
    @type local
    persistent true
    path /var/log/fluentd/systemd-vault.pos
  </storage>
  
  <entry>
    field_map {"MESSAGE": "message", "_SYSTEMD_UNIT": "unit", "_HOSTNAME": "hostname"}
    fields_strip_underscores true
  </entry>
</source>

<filter systemd.vault>
  @type record_transformer
  @id vault_systemd_enrichment
  
  <record>
    service "vault"
    environment "production"
    log_type "systemd"
    component "service_manager"
  </record>
</filter>