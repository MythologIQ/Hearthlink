"use strict";
globalThis["webpackHotUpdateHearthlink"]("main",{

/***/ "./src/components/SynapseGateway.js":
/*!******************************************!*\
  !*** ./src/components/SynapseGateway.js ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _SynapseGateway_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SynapseGateway.css */ "./src/components/SynapseGateway.css");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "G:\\mythologiq\\hearthlink\\src\\components\\SynapseGateway.js",
  _s = __webpack_require__.$Refresh$.signature();



const SynapseGateway = ({
  accessibilitySettings,
  onVoiceCommand
}) => {
  _s();
  const [activeTab, setActiveTab] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('overview');
  const [synapseStatus, setSynapseStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
    gateway: 'initializing',
    connections: 0,
    agents: 0,
    mcp_servers: 0,
    security: 'monitoring',
    traffic: 'low'
  });
  const [activeConnections, setActiveConnections] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [mcpServers, setMcpServers] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [externalAgents, setExternalAgents] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [securityLogs, setSecurityLogs] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [trafficMetrics, setTrafficMetrics] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
    requests_per_minute: 0,
    bandwidth_usage: 0,
    error_rate: 0,
    response_time: 0
  });
  const [apiConfigurations, setApiConfigurations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
    hearthlink_api: {
      status: 'checking',
      endpoint: 'http://192.168.0.29:8080/api',
      rate_limit: 'unlimited',
      last_test: null
    },
    google_gemini: {
      status: 'not_configured',
      endpoint: 'https://generativelanguage.googleapis.com/v1beta',
      rate_limit: '60/min',
      last_test: null
    },
    openai: {
      status: 'not_configured',
      endpoint: 'https://api.openai.com/v1',
      rate_limit: 'none',
      last_test: null
    },
    anthropic: {
      status: 'not_configured',
      endpoint: 'https://api.anthropic.com/v1',
      rate_limit: 'none',
      last_test: null
    },
    kimi_k2: {
      status: 'not_configured',
      endpoint: 'https://openrouter.ai/api/v1',
      model: 'moonshotai/kimi-k2',
      rate_limit: 'variable',
      last_test: null,
      features: ['128K context', 'Tool calling', 'Agentic workflows', 'Code generation'],
      cost_per_1k_tokens: {
        input: 0.57,
        output: 2.30
      }
    }
  });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    initializeSynapse();
    const statusInterval = setInterval(updateSynapseStatus, 5000);
    return () => clearInterval(statusInterval);
  }, []);
  const initializeSynapse = async () => {
    addSecurityLog('SYNAPSE_INIT', 'Initializing Synapse Gateway...', 'info');

    // Check real API connections
    await checkHearthlinkAPI();
    await checkExternalAPIs();
    await checkClaudeCodeCLI();
    setSynapseStatus({
      gateway: 'online',
      connections: activeConnections.length,
      agents: 0,
      // Will be updated by loadExternalAgents
      mcp_servers: 0,
      // Will be updated by loadMcpServers
      security: 'secured',
      traffic: 'monitoring'
    });

    // Load MCP servers
    loadMcpServers();

    // Load external agents
    loadExternalAgents();
    addSecurityLog('SYNAPSE_ONLINE', 'Synapse Gateway fully operational', 'success');
  };
  const checkHearthlinkAPI = async () => {
    try {
      addSecurityLog('API_CHECK', 'Testing Hearthlink REST API...', 'info');
      const response = await fetch('http://192.168.0.29:8080/api/health');
      if (response.ok) {
        const healthData = await response.json();
        setApiConfigurations(prev => ({
          ...prev,
          hearthlink_api: {
            ...prev.hearthlink_api,
            status: 'configured',
            last_test: new Date().toISOString()
          }
        }));
        addSecurityLog('API_SUCCESS', `Hearthlink API online - ${healthData.status}`, 'success');
        await loadHearthlinkData();
      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    } catch (error) {
      setApiConfigurations(prev => ({
        ...prev,
        hearthlink_api: {
          ...prev.hearthlink_api,
          status: 'error',
          last_test: new Date().toISOString()
        }
      }));
      addSecurityLog('API_ERROR', `Hearthlink API offline - ${error.message}`, 'error');
    }
  };
  const loadHearthlinkData = async () => {
    try {
      var _agentsData$agents, _tokensData$tokens;
      // Load agents
      const agentsResponse = await fetch('http://192.168.0.29:8080/api/agents');
      const agentsData = await agentsResponse.json();

      // Load tokens  
      const tokensResponse = await fetch('http://192.168.0.29:8080/api/tokens');
      const tokensData = await tokensResponse.json();

      // Create real connections from API data
      const connections = [];
      if (agentsData.agents) {
        agentsData.agents.forEach(agent => {
          connections.push({
            id: `agent_${agent.id.substring(0, 8)}`,
            agent: agent.name,
            type: 'AGENT_API',
            status: 'active',
            started: agent.created_at,
            requests: Math.floor(Math.random() * 50) + 10,
            bandwidth: `${(Math.random() * 2).toFixed(1)}MB`
          });
        });
      }
      if (tokensData.tokens) {
        connections.push({
          id: 'token_pool',
          agent: `${tokensData.tokens.length} Active Tokens`,
          type: 'AUTH_POOL',
          status: 'active',
          started: new Date().toISOString(),
          requests: tokensData.tokens.reduce((sum, token) => sum + Math.floor(Math.random() * 20), 0),
          bandwidth: '0.5MB'
        });
      }
      setActiveConnections(connections);
      addSecurityLog('DATA_LOADED', `Loaded ${((_agentsData$agents = agentsData.agents) === null || _agentsData$agents === void 0 ? void 0 : _agentsData$agents.length) || 0} agents, ${((_tokensData$tokens = tokensData.tokens) === null || _tokensData$tokens === void 0 ? void 0 : _tokensData$tokens.length) || 0} tokens`, 'info');
    } catch (error) {
      addSecurityLog('DATA_ERROR', 'Failed to load Hearthlink data', 'warning');
    }
  };
  const checkExternalAPIs = async () => {
    // Check Gemini API if key is available
    const geminiKey = ({"NODE_ENV":"development","PUBLIC_URL":"","WDS_SOCKET_HOST":undefined,"WDS_SOCKET_PATH":undefined,"WDS_SOCKET_PORT":undefined,"FAST_REFRESH":true,"REACT_APP_CLAUDE_CODE":"true","REACT_APP_ENV":"development","REACT_APP_HEARTHLINK_API":"http://192.168.0.29:8080/api"}).REACT_APP_GEMINI_API_KEY;
    if (geminiKey) {
      try {
        addSecurityLog('API_CHECK', 'Testing Google Gemini API...', 'info');

        // Test Gemini API with a simple request
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${geminiKey}`);
        if (response.ok) {
          setApiConfigurations(prev => ({
            ...prev,
            google_gemini: {
              ...prev.google_gemini,
              status: 'configured',
              last_test: new Date().toISOString()
            }
          }));
          addSecurityLog('API_SUCCESS', 'Google Gemini API authenticated', 'success');
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
      } catch (error) {
        setApiConfigurations(prev => ({
          ...prev,
          google_gemini: {
            ...prev.google_gemini,
            status: 'error',
            last_test: new Date().toISOString()
          }
        }));
        addSecurityLog('API_ERROR', `Gemini API test failed - ${error.message}`, 'error');
      }
    } else {
      addSecurityLog('CONFIG_MISSING', 'Gemini API key not configured', 'warning');
    }

    // Check Kimi K2 API if key is available
    const kimiK2Key = ({"NODE_ENV":"development","PUBLIC_URL":"","WDS_SOCKET_HOST":undefined,"WDS_SOCKET_PATH":undefined,"WDS_SOCKET_PORT":undefined,"FAST_REFRESH":true,"REACT_APP_CLAUDE_CODE":"true","REACT_APP_ENV":"development","REACT_APP_HEARTHLINK_API":"http://192.168.0.29:8080/api"}).REACT_APP_KIMI_K2_API_KEY;
    if (kimiK2Key) {
      try {
        addSecurityLog('API_CHECK', 'Testing Kimi K2 API...', 'info');

        // Test Kimi K2 API through OpenRouter
        const response = await fetch('https://openrouter.ai/api/v1/models', {
          headers: {
            'Authorization': `Bearer ${kimiK2Key}`,
            'Content-Type': 'application/json'
          }
        });
        if (response.ok) {
          var _models$data;
          const models = await response.json();
          const kimiModel = (_models$data = models.data) === null || _models$data === void 0 ? void 0 : _models$data.find(model => model.id.includes('kimi') || model.id.includes('moonshot'));
          setApiConfigurations(prev => ({
            ...prev,
            kimi_k2: {
              ...prev.kimi_k2,
              status: 'configured',
              last_test: new Date().toISOString(),
              model_available: kimiModel ? kimiModel.id : 'moonshotai/kimi-k2'
            }
          }));
          setActiveConnections(prev => [...prev, {
            id: 'kimi_k2_api',
            agent: 'Kimi K2 API',
            type: 'API_INTEGRATION',
            status: 'active',
            started: new Date().toISOString(),
            requests: 0,
            bandwidth: 'N/A'
          }]);
          addSecurityLog('API_SUCCESS', 'Kimi K2 API authenticated via OpenRouter', 'success');
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
      } catch (error) {
        setApiConfigurations(prev => ({
          ...prev,
          kimi_k2: {
            ...prev.kimi_k2,
            status: 'error',
            last_test: new Date().toISOString(),
            error_message: error.message
          }
        }));
        addSecurityLog('API_ERROR', `Kimi K2 API test failed - ${error.message}`, 'error');
      }
    } else {
      addSecurityLog('CONFIG_MISSING', 'Kimi K2 API key not configured', 'warning');
    }
  };
  const checkClaudeCodeCLI = async () => {
    try {
      addSecurityLog('CLI_CHECK', 'Detecting Claude Code CLI integration...', 'info');

      // Check if we're running in Claude Code environment
      const isClaudeCode = window.navigator.userAgent.includes('claude-code') || "true" === 'true' || 0;
      if (isClaudeCode) {
        setApiConfigurations(prev => ({
          ...prev,
          claude_code_cli: {
            status: 'configured',
            endpoint: 'claude-code://cli',
            rate_limit: 'unlimited',
            last_test: new Date().toISOString()
          }
        }));
        setActiveConnections(prev => [...prev, {
          id: 'claude_code_cli',
          agent: 'Claude Code CLI',
          type: 'CLI_INTEGRATION',
          status: 'active',
          started: new Date().toISOString(),
          requests: 1,
          bandwidth: 'N/A'
        }]);
        addSecurityLog('CLI_SUCCESS', 'Claude Code CLI integration active', 'success');
      } else {
        addSecurityLog('CLI_INFO', 'Claude Code CLI not detected', 'info');
      }
    } catch (error) {
      addSecurityLog('CLI_ERROR', `CLI detection failed - ${error.message}`, 'warning');
    }
  };
  const loadMcpServers = () => {
    // MCP servers provide tool capabilities to external agents
    const servers = [{
      id: 'filesystem_mcp',
      name: 'Filesystem MCP Server',
      version: '1.0.0',
      status: 'active',
      port: 3001,
      tools: ['read_file', 'write_file', 'list_directory', 'create_directory'],
      description: 'Provides filesystem operations for external agents'
    }, {
      id: 'memory_mcp',
      name: 'Memory MCP Server',
      version: '1.0.0',
      status: 'active',
      port: 3002,
      tools: ['store_memory', 'retrieve_memory', 'search_memory'],
      description: 'Provides memory management capabilities'
    }, {
      id: 'github_mcp',
      name: 'GitHub MCP Server',
      version: '1.0.0',
      status: 'inactive',
      port: 3003,
      tools: ['create_repo', 'commit_changes', 'create_pr', 'search_code'],
      description: 'GitHub integration for repository operations'
    }];
    setMcpServers(servers);
    setSynapseStatus(prev => ({
      ...prev,
      mcp_servers: servers.length
    }));
  };
  const loadExternalAgents = () => {
    var _apiConfigurations$go, _apiConfigurations$ki, _apiConfigurations$cl;
    // External AI agents that connect through Synapse
    const agents = [{
      id: 'google_gemini',
      name: 'Google Gemini',
      type: 'ai_agent',
      status: ((_apiConfigurations$go = apiConfigurations.google_gemini) === null || _apiConfigurations$go === void 0 ? void 0 : _apiConfigurations$go.status) || 'not_configured',
      capabilities: ['text_generation', 'code_analysis', 'reasoning'],
      mcp_servers: ['filesystem_mcp', 'memory_mcp'],
      description: 'Google\'s Gemini AI model'
    }, {
      id: 'kimi_k2',
      name: 'Kimi K2',
      type: 'ai_agent',
      status: ((_apiConfigurations$ki = apiConfigurations.kimi_k2) === null || _apiConfigurations$ki === void 0 ? void 0 : _apiConfigurations$ki.status) || 'not_configured',
      capabilities: ['text_generation', 'tool_calling', 'agentic_workflows'],
      mcp_servers: ['filesystem_mcp', 'memory_mcp'],
      description: 'Moonshot AI\'s Kimi K2 model'
    }, {
      id: 'claude_code_cli',
      name: 'Claude Code CLI',
      type: 'local_agent',
      status: ((_apiConfigurations$cl = apiConfigurations.claude_code_cli) === null || _apiConfigurations$cl === void 0 ? void 0 : _apiConfigurations$cl.status) || 'not_configured',
      capabilities: ['direct_disk_write', 'code_execution', 'tool_access'],
      mcp_servers: [],
      // Direct access, no MCP needed
      description: 'Local Claude Code CLI with direct system access'
    }];
    setExternalAgents(agents);
    setSynapseStatus(prev => ({
      ...prev,
      agents: agents.length
    }));
  };
  const updateSynapseStatus = () => {
    // Simulate real-time metrics updates
    setTrafficMetrics(prev => ({
      requests_per_minute: Math.floor(Math.random() * 30) + 10,
      bandwidth_usage: Math.floor(Math.random() * 1000) + 500,
      error_rate: Math.random() * 2,
      response_time: Math.floor(Math.random() * 200) + 150
    }));

    // Random security events
    if (Math.random() < 0.1) {
      const events = [{
        type: 'ACCESS_GRANTED',
        message: 'Plugin execution authorized',
        level: 'info'
      }, {
        type: 'RATE_LIMIT',
        message: 'Rate limit threshold reached for Google AI',
        level: 'warning'
      }, {
        type: 'SECURITY_SCAN',
        message: 'Periodic security scan completed',
        level: 'info'
      }];
      const event = events[Math.floor(Math.random() * events.length)];
      addSecurityLog(event.type, event.message, event.level);
    }
  };
  const addSecurityLog = (type, message, level) => {
    const logEntry = {
      id: Date.now(),
      timestamp: new Date().toISOString(),
      type,
      message,
      level
    };
    setSecurityLogs(prev => [logEntry, ...prev].slice(0, 50));
  };
  const testApiConnection = async apiName => {
    addSecurityLog('API_TEST', `Testing ${apiName} connection...`, 'info');
    setApiConfigurations(prev => ({
      ...prev,
      [apiName]: {
        ...prev[apiName],
        status: 'testing'
      }
    }));
    try {
      let isSuccess = false;
      switch (apiName) {
        case 'hearthlink_api':
          const healthResponse = await fetch('http://192.168.0.29:8080/api/health');
          isSuccess = healthResponse.ok;
          if (isSuccess) {
            await loadHearthlinkData();
          }
          break;
        case 'google_gemini':
          const geminiKey = ({"NODE_ENV":"development","PUBLIC_URL":"","WDS_SOCKET_HOST":undefined,"WDS_SOCKET_PATH":undefined,"WDS_SOCKET_PORT":undefined,"FAST_REFRESH":true,"REACT_APP_CLAUDE_CODE":"true","REACT_APP_ENV":"development","REACT_APP_HEARTHLINK_API":"http://192.168.0.29:8080/api"}).REACT_APP_GEMINI_API_KEY;
          if (geminiKey) {
            const geminiResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${geminiKey}`);
            isSuccess = geminiResponse.ok;
          } else {
            throw new Error('API key not configured');
          }
          break;
        case 'kimi_k2':
          const kimiKey = ({"NODE_ENV":"development","PUBLIC_URL":"","WDS_SOCKET_HOST":undefined,"WDS_SOCKET_PATH":undefined,"WDS_SOCKET_PORT":undefined,"FAST_REFRESH":true,"REACT_APP_CLAUDE_CODE":"true","REACT_APP_ENV":"development","REACT_APP_HEARTHLINK_API":"http://192.168.0.29:8080/api"}).REACT_APP_KIMI_K2_API_KEY;
          if (kimiKey) {
            const kimiResponse = await fetch('https://openrouter.ai/api/v1/models', {
              headers: {
                'Authorization': `Bearer ${kimiKey}`,
                'HTTP-Referer': 'https://hearthlink.ai',
                'X-Title': 'Hearthlink AI Orchestration'
              }
            });
            if (kimiResponse.ok) {
              var _data$data;
              const data = await kimiResponse.json();
              const kimiModel = (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.find(model => model.id === 'moonshotai/kimi-k2');
              isSuccess = !!kimiModel;
            }
          } else {
            throw new Error('API key not configured');
          }
          break;
        case 'claude_code_cli':
          // Test Claude Code CLI integration
          isSuccess = window.navigator.userAgent.includes('claude-code') || "true" === 'true';
          break;
        default:
          // For other APIs, simulate test
          await new Promise(resolve => setTimeout(resolve, 2000));
          isSuccess = Math.random() > 0.3;
      }
      setApiConfigurations(prev => ({
        ...prev,
        [apiName]: {
          ...prev[apiName],
          status: isSuccess ? 'configured' : 'error',
          last_test: new Date().toISOString()
        }
      }));
      addSecurityLog('API_TEST', `${apiName} connection test ${isSuccess ? 'successful' : 'failed'}`, isSuccess ? 'success' : 'error');
    } catch (error) {
      setApiConfigurations(prev => ({
        ...prev,
        [apiName]: {
          ...prev[apiName],
          status: 'error',
          last_test: new Date().toISOString()
        }
      }));
      addSecurityLog('API_ERROR', `${apiName} test failed: ${error.message}`, 'error');
    }
  };

  // Modal states for CRUD operations
  const [showAgentModal, setShowAgentModal] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [showMcpModal, setShowMcpModal] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [editingAgent, setEditingAgent] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const [editingMcp, setEditingMcp] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);

  // MCP Server Management Functions
  const addMcpServer = serverData => {
    const newServer = {
      id: `mcp_${Date.now()}`,
      ...serverData,
      status: 'inactive'
    };
    setMcpServers(prev => [...prev, newServer]);
    addSecurityLog('MCP_ADDED', `MCP server ${newServer.name} added`, 'info');
  };
  const updateMcpServer = (serverId, updates) => {
    setMcpServers(prev => prev.map(server => server.id === serverId ? {
      ...server,
      ...updates
    } : server));
    addSecurityLog('MCP_UPDATED', `MCP server ${serverId} updated`, 'info');
  };
  const deleteMcpServer = serverId => {
    const server = mcpServers.find(s => s.id === serverId);
    if (server) {
      setMcpServers(prev => prev.filter(s => s.id !== serverId));
      addSecurityLog('MCP_DELETED', `MCP server ${server.name} removed`, 'warning');
    }
  };

  // External Agent Management Functions  
  const addExternalAgent = agentData => {
    const newAgent = {
      id: `agent_${Date.now()}`,
      ...agentData,
      status: 'not_configured'
    };
    setExternalAgents(prev => [...prev, newAgent]);
    addSecurityLog('AGENT_ADDED', `External agent ${newAgent.name} added`, 'info');
  };
  const updateExternalAgent = (agentId, updates) => {
    setExternalAgents(prev => prev.map(agent => agent.id === agentId ? {
      ...agent,
      ...updates
    } : agent));
    addSecurityLog('AGENT_UPDATED', `External agent ${agentId} updated`, 'info');
  };
  const deleteExternalAgent = agentId => {
    const agent = externalAgents.find(a => a.id === agentId);
    if (agent) {
      setExternalAgents(prev => prev.filter(a => a.id !== agentId));
      addSecurityLog('AGENT_DELETED', `External agent ${agent.name} removed`, 'warning');
    }
  };
  const getStatusColor = status => {
    const colors = {
      'online': '#00ff88',
      'active': '#00ccff',
      'configured': '#00ff88',
      'secured': '#00ff88',
      'monitoring': '#ffaa00',
      'testing': '#ffaa00',
      'executing': '#ffaa00',
      'standby': '#888888',
      'error': '#ff4444',
      'not_configured': '#ff6666',
      'initializing': '#aa88ff'
    };
    return colors[status] || '#888888';
  };
  const getRiskColor = risk => {
    const colors = {
      'low': '#00ff88',
      'medium': '#ffaa00',
      'high': '#ff6666',
      'critical': '#ff0000'
    };
    return colors[risk] || '#888888';
  };

  // API Communication Functions for Core/Project Command Integration
  const callGoogleGeminiAPI = async (prompt, options = {}) => {
    const geminiKey = ({"NODE_ENV":"development","PUBLIC_URL":"","WDS_SOCKET_HOST":undefined,"WDS_SOCKET_PATH":undefined,"WDS_SOCKET_PORT":undefined,"FAST_REFRESH":true,"REACT_APP_CLAUDE_CODE":"true","REACT_APP_ENV":"development","REACT_APP_HEARTHLINK_API":"http://192.168.0.29:8080/api"}).REACT_APP_GEMINI_API_KEY;
    if (!geminiKey) {
      throw new Error('Google Gemini API key not configured');
    }
    addSecurityLog('API_CALL', 'Calling Google Gemini API', 'info');
    try {
      var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${geminiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            maxOutputTokens: options.maxTokens || 1000,
            temperature: options.temperature || 0.7,
            topP: options.topP || 0.9,
            topK: options.topK || 40
          }
        })
      });
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      const data = await response.json();
      const result = ((_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || 'No response';
      addSecurityLog('API_SUCCESS', 'Google Gemini API call successful', 'success');
      return {
        success: true,
        result,
        usage: data.usageMetadata
      };
    } catch (error) {
      addSecurityLog('API_ERROR', `Google Gemini API call failed: ${error.message}`, 'error');
      throw error;
    }
  };
  const callKimiK2API = async (prompt, options = {}) => {
    const kimiK2Key = ({"NODE_ENV":"development","PUBLIC_URL":"","WDS_SOCKET_HOST":undefined,"WDS_SOCKET_PATH":undefined,"WDS_SOCKET_PORT":undefined,"FAST_REFRESH":true,"REACT_APP_CLAUDE_CODE":"true","REACT_APP_ENV":"development","REACT_APP_HEARTHLINK_API":"http://192.168.0.29:8080/api"}).REACT_APP_KIMI_K2_API_KEY;
    if (!kimiK2Key) {
      throw new Error('Kimi K2 API key not configured');
    }
    addSecurityLog('API_CALL', 'Calling Kimi K2 API', 'info');
    try {
      var _data$choices, _data$choices$, _data$choices$$messag;
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${kimiK2Key}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': 'https://hearthlink.ai',
          'X-Title': 'Hearthlink AI Orchestration'
        },
        body: JSON.stringify({
          model: 'moonshotai/kimi-k2',
          messages: [{
            role: 'user',
            content: prompt
          }],
          max_tokens: options.maxTokens || 1000,
          temperature: options.temperature || 0.7,
          top_p: options.topP || 0.9,
          stream: false
        })
      });
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      const data = await response.json();
      const result = ((_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || 'No response';
      addSecurityLog('API_SUCCESS', 'Kimi K2 API call successful', 'success');
      return {
        success: true,
        result,
        usage: data.usage
      };
    } catch (error) {
      addSecurityLog('API_ERROR', `Kimi K2 API call failed: ${error.message}`, 'error');
      throw error;
    }
  };
  const callClaudeCodeCLI = async (command, options = {}) => {
    // Check if Claude Code CLI is available
    const isClaudeCode = window.navigator.userAgent.includes('claude-code') || "true" === 'true';
    if (!isClaudeCode) {
      throw new Error('Claude Code CLI not available');
    }
    addSecurityLog('CLI_CALL', 'Calling Claude Code CLI', 'info');
    try {
      // Claude Code CLI integration - direct disk write capability
      // This would interface with the actual Claude Code CLI
      // For now, we'll simulate the call and return success

      const result = `Claude Code CLI executed: ${command}`;
      addSecurityLog('CLI_SUCCESS', 'Claude Code CLI call successful', 'success');
      return {
        success: true,
        result,
        capability: 'direct_disk_write'
      };
    } catch (error) {
      addSecurityLog('CLI_ERROR', `Claude Code CLI call failed: ${error.message}`, 'error');
      throw error;
    }
  };

  // Expose API functions for Core/Project Command integration
  window.synapseGateway = {
    callGoogleGeminiAPI,
    callKimiK2API,
    callClaudeCodeCLI,
    getStatus: () => synapseStatus,
    getConnections: () => activeConnections,
    getAPIConfigurations: () => apiConfigurations
  };
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
    className: "synapse-gateway",
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
      className: "synapse-header",
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        className: "header-title",
        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("h1", {
          children: ["SYNAPSE ", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
            className: "glow-text",
            children: "GATEWAY"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 735,
            columnNumber: 23
          }, undefined)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 735,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "header-subtitle",
          children: "Secure External Protocol Boundary"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 736,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 734,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        className: "gateway-status",
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "status-indicator",
          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
            className: "status-label",
            children: "GATEWAY:"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 740,
            columnNumber: 13
          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
            className: `status-value`,
            style: {
              color: getStatusColor(synapseStatus.gateway)
            },
            children: synapseStatus.gateway.toUpperCase()
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 741,
            columnNumber: 13
          }, undefined)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 739,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 738,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 733,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
      className: "synapse-dashboard",
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        className: "dashboard-section overview-section",
        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "section-header",
          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("h2", {
            children: "\uD83D\uDD12 SYSTEM OVERVIEW"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 753,
            columnNumber: 13
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 752,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "overview-grid",
          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "overview-card",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "card-header",
              children: "Gateway Status"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 758,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "card-value",
              style: {
                color: getStatusColor(synapseStatus.gateway)
              },
              children: synapseStatus.gateway.toUpperCase()
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 759,
              columnNumber: 15
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 757,
            columnNumber: 13
          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "overview-card",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "card-header",
              children: "Active Plugins"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 765,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "card-value",
              children: synapseStatus.plugins
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 766,
              columnNumber: 15
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 764,
            columnNumber: 13
          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "overview-card",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "card-header",
              children: "Connections"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 772,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "card-value",
              children: synapseStatus.connections
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 773,
              columnNumber: 15
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 771,
            columnNumber: 13
          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "overview-card",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "card-header",
              children: "Security"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 779,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "card-value",
              style: {
                color: getStatusColor(synapseStatus.security)
              },
              children: synapseStatus.security.toUpperCase()
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 780,
              columnNumber: 15
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 778,
            columnNumber: 13
          }, undefined)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 756,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 751,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        className: "dashboard-section api-section",
        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "section-header",
          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("h2", {
            children: "\uD83D\uDD17 API CONFIGURATIONS"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 790,
            columnNumber: 13
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 789,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "api-grid",
          children: Object.entries(apiConfigurations).map(([apiName, config]) => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "api-card",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "api-header",
              children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
                className: "api-name",
                children: apiName.toUpperCase()
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 797,
                columnNumber: 19
              }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
                className: "api-status",
                style: {
                  color: getStatusColor(config.status)
                },
                children: ["\u25CF ", config.status.toUpperCase()]
              }, void 0, true, {
                fileName: _jsxFileName,
                lineNumber: 798,
                columnNumber: 19
              }, undefined)]
            }, void 0, true, {
              fileName: _jsxFileName,
              lineNumber: 796,
              columnNumber: 17
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "api-details",
              children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
                className: "api-detail",
                children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
                  className: "detail-label",
                  children: "Endpoint:"
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 805,
                  columnNumber: 21
                }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
                  className: "detail-value",
                  children: config.endpoint
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 806,
                  columnNumber: 21
                }, undefined)]
              }, void 0, true, {
                fileName: _jsxFileName,
                lineNumber: 804,
                columnNumber: 19
              }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
                className: "api-detail",
                children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
                  className: "detail-label",
                  children: "Rate Limit:"
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 810,
                  columnNumber: 21
                }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
                  className: "detail-value",
                  children: config.rate_limit
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 811,
                  columnNumber: 21
                }, undefined)]
              }, void 0, true, {
                fileName: _jsxFileName,
                lineNumber: 809,
                columnNumber: 19
              }, undefined), config.last_test && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
                className: "api-detail",
                children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
                  className: "detail-label",
                  children: "Last Test:"
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 816,
                  columnNumber: 23
                }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
                  className: "detail-value",
                  children: new Date(config.last_test).toLocaleTimeString()
                }, void 0, false, {
                  fileName: _jsxFileName,
                  lineNumber: 817,
                  columnNumber: 23
                }, undefined)]
              }, void 0, true, {
                fileName: _jsxFileName,
                lineNumber: 815,
                columnNumber: 21
              }, undefined)]
            }, void 0, true, {
              fileName: _jsxFileName,
              lineNumber: 803,
              columnNumber: 17
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "api-actions",
              children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("button", {
                onClick: () => testApiConnection(apiName),
                disabled: config.status === 'testing',
                className: "test-btn",
                children: config.status === 'testing' ? 'TESTING...' : 'TEST CONNECTION'
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 825,
                columnNumber: 19
              }, undefined), apiName === 'hearthlink_api' && config.status === 'configured' && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("button", {
                onClick: () => window.open('/tokens', '_blank'),
                className: "manage-btn",
                style: {
                  marginLeft: '10px',
                  backgroundColor: 'rgba(34, 211, 238, 0.2)',
                  color: '#22d3ee',
                  border: '1px solid #22d3ee'
                },
                children: "MANAGE TOKENS"
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 834,
                columnNumber: 21
              }, undefined)]
            }, void 0, true, {
              fileName: _jsxFileName,
              lineNumber: 824,
              columnNumber: 17
            }, undefined)]
          }, apiName, true, {
            fileName: _jsxFileName,
            lineNumber: 795,
            columnNumber: 15
          }, undefined))
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 793,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 788,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        className: "dashboard-section plugins-section",
        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "section-header",
          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("h2", {
            children: "\uD83D\uDD0C PLUGIN REGISTRY"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 856,
            columnNumber: 13
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 855,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "plugins-list",
          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "plugins-header",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              children: "Plugin"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 861,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              children: "Version"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 862,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              children: "Status"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 863,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              children: "Risk"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 864,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              children: "Actions"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 865,
              columnNumber: 15
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 860,
            columnNumber: 13
          }, undefined), pluginRegistry.map(plugin => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "plugin-row",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "plugin-info",
              children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
                className: "plugin-name",
                children: plugin.name
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 871,
                columnNumber: 19
              }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
                className: "plugin-permissions",
                children: plugin.permissions.map(perm => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
                  className: "permission-badge",
                  children: perm
                }, perm, false, {
                  fileName: _jsxFileName,
                  lineNumber: 874,
                  columnNumber: 23
                }, undefined))
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 872,
                columnNumber: 19
              }, undefined)]
            }, void 0, true, {
              fileName: _jsxFileName,
              lineNumber: 870,
              columnNumber: 17
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              className: "plugin-version",
              children: plugin.version
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 879,
              columnNumber: 17
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              className: "plugin-status",
              style: {
                color: getStatusColor(plugin.status)
              },
              children: plugin.status.toUpperCase()
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 881,
              columnNumber: 17
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              className: "plugin-risk",
              style: {
                color: getRiskColor(plugin.risk_tier)
              },
              children: plugin.risk_tier.toUpperCase()
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 885,
              columnNumber: 17
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "plugin-actions",
              children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("button", {
                onClick: () => executePlugin(plugin.id),
                disabled: plugin.status === 'executing',
                className: "execute-btn",
                children: plugin.status === 'executing' ? 'EXECUTING...' : 'EXECUTE'
              }, void 0, false, {
                fileName: _jsxFileName,
                lineNumber: 890,
                columnNumber: 19
              }, undefined)
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 889,
              columnNumber: 17
            }, undefined)]
          }, plugin.id, true, {
            fileName: _jsxFileName,
            lineNumber: 869,
            columnNumber: 15
          }, undefined))]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 859,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 854,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        className: "dashboard-section traffic-section",
        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "section-header",
          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("h2", {
            children: "\uD83D\uDCC8 TRAFFIC METRICS"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 906,
            columnNumber: 13
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 905,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "traffic-grid",
          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "metric-card",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "metric-header",
              children: "Requests/Min"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 911,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "metric-value",
              children: trafficMetrics.requests_per_minute
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 912,
              columnNumber: 15
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 910,
            columnNumber: 13
          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "metric-card",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "metric-header",
              children: "Bandwidth (KB)"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 916,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "metric-value",
              children: trafficMetrics.bandwidth_usage
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 917,
              columnNumber: 15
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 915,
            columnNumber: 13
          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "metric-card",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "metric-header",
              children: "Error Rate (%)"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 921,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "metric-value",
              children: trafficMetrics.error_rate.toFixed(2)
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 922,
              columnNumber: 15
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 920,
            columnNumber: 13
          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: "metric-card",
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "metric-header",
              children: "Response Time (ms)"
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 926,
              columnNumber: 15
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
              className: "metric-value",
              children: trafficMetrics.response_time
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 927,
              columnNumber: 15
            }, undefined)]
          }, void 0, true, {
            fileName: _jsxFileName,
            lineNumber: 925,
            columnNumber: 13
          }, undefined)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 909,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 904,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        className: "dashboard-section logs-section",
        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "section-header",
          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("h2", {
            children: "\uD83D\uDEE1\uFE0F SECURITY LOGS"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 935,
            columnNumber: 13
          }, undefined)
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 934,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
          className: "logs-container",
          children: securityLogs.map(log => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
            className: `log-entry log-${log.level}`,
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              className: "log-timestamp",
              children: new Date(log.timestamp).toLocaleTimeString()
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 941,
              columnNumber: 17
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              className: "log-type",
              children: ["[", log.type, "]"]
            }, void 0, true, {
              fileName: _jsxFileName,
              lineNumber: 944,
              columnNumber: 17
            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("span", {
              className: "log-message",
              children: log.message
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 945,
              columnNumber: 17
            }, undefined)]
          }, log.id, true, {
            fileName: _jsxFileName,
            lineNumber: 940,
            columnNumber: 15
          }, undefined))
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 938,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 933,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 749,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 731,
    columnNumber: 5
  }, undefined);
};
_s(SynapseGateway, "7yO2OzRzlABMGKgpI1vw5zi5f4o=");
_c = SynapseGateway;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SynapseGateway);
var _c;
__webpack_require__.$Refresh$.register(_c, "SynapseGateway");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("54f84686dbd53adea1d9")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=main.1b8dd62e6595f10cead8.hot-update.js.map