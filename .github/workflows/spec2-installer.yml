name: SPEC-2 Tauri Installer Build

on:
  push:
    branches: [ main, develop, Troubleshooting-7-21-2025 ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate-spec2:
    name: Validate SPEC-2 Components
    runs-on: ubuntu-latest
    outputs:
      validation-status: ${{ steps.validate.outputs.status }}
      badge-color: ${{ steps.validate.outputs.badge-color }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate SPEC-2 components
      id: validate
      run: |
        python scripts/validate_installer.py
        if [ $? -eq 0 ]; then
          echo "status=passed" >> $GITHUB_OUTPUT
          echo "badge-color=brightgreen" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "badge-color=red" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: validation_report.json

  build-installer:
    name: Build SPEC-2 Installer
    needs: validate-spec2
    if: needs.validate-spec2.outputs.validation-status == 'passed'
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        
    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python (for validation)
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli
      
    - name: Update validation timestamps
      run: |
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        if [ -f "src-tauri/assets/validation.json" ]; then
          sed -i.bak "s/\"build_timestamp\": \"[^\"]*\"/\"build_timestamp\": \"$TIMESTAMP\"/" src-tauri/assets/validation.json
        fi
        if [ -f "src-tauri/assets/ci_badges.json" ]; then
          sed -i.bak "s/\"generated_at\": \"[^\"]*\"/\"generated_at\": \"$TIMESTAMP\"/" src-tauri/assets/ci_badges.json
        fi
      shell: bash
      
    - name: Compile TypeScript
      run: npm run compile:ts
      continue-on-error: true
      
    - name: Build React frontend
      run: npm run build
      
    - name: Build Tauri app (Linux)
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
        npm run tauri:build
        
    - name: Build Tauri app (Windows)
      if: matrix.platform == 'windows-latest'
      run: npm run tauri:build
      
    - name: Build Tauri app (macOS)
      if: matrix.platform == 'macos-latest'
      run: npm run tauri:build
      
    - name: Calculate checksums
      run: |
        if [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
          find src-tauri/target/release/bundle -name "*.deb" -o -name "*.AppImage" | xargs sha256sum > checksums-linux.txt || echo "No Linux artifacts"
        elif [ "${{ matrix.platform }}" = "windows-latest" ]; then
          powershell -Command "Get-ChildItem -Path 'src-tauri/target/release/bundle' -Recurse -Include '*.exe','*.msi' | Get-FileHash -Algorithm SHA256 | Format-Table Hash,Path -AutoSize > checksums-windows.txt"
        elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
          find src-tauri/target/release/bundle -name "*.dmg" | xargs shasum -a 256 > checksums-macos.txt || echo "No macOS artifacts"
        fi
      shell: bash
      
    - name: Upload installer artifacts (Linux)
      if: matrix.platform == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: installer-linux
        path: |
          src-tauri/target/release/bundle/deb/*.deb
          src-tauri/target/release/bundle/appimage/*.AppImage
          checksums-linux.txt
        if-no-files-found: warn
        
    - name: Upload installer artifacts (Windows)
      if: matrix.platform == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: installer-windows
        path: |
          src-tauri/target/release/bundle/nsis/*.exe
          src-tauri/target/release/bundle/msi/*.msi
          checksums-windows.txt
        if-no-files-found: warn
        
    - name: Upload installer artifacts (macOS)
      if: matrix.platform == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: installer-macos
        path: |
          src-tauri/target/release/bundle/dmg/*.dmg
          checksums-macos.txt
        if-no-files-found: warn

  generate-badges:
    name: Generate CI Badges
    needs: [validate-spec2, build-installer]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate badge data
      run: |
        # Create badges based on build results
        if [ "${{ needs.validate-spec2.outputs.validation-status }}" = "passed" ] && [ "${{ needs.build-installer.result }}" = "success" ]; then
          OVERALL_STATUS="passing"
          OVERALL_COLOR="brightgreen"
        else
          OVERALL_STATUS="failing"
          OVERALL_COLOR="red"
        fi
        
        # Update CI badges JSON
        cat > ci_badges_updated.json << EOF
        {
          "ci_badges": {
            "build_status": {
              "label": "SPEC-2 Build",
              "status": "$OVERALL_STATUS",
              "color": "$OVERALL_COLOR",
              "logo": "github-actions"
            },
            "spec2_compliance": {
              "label": "SPEC-2 Compliance",
              "status": "${{ needs.validate-spec2.outputs.validation-status }}",
              "color": "${{ needs.validate-spec2.outputs.badge-color }}",
              "logo": "checkmark"
            },
            "installer_ready": {
              "label": "Installer",
              "status": "${{ needs.build-installer.result == 'success' && 'ready' || 'unavailable' }}",
              "color": "${{ needs.build-installer.result == 'success' && 'blue' || 'lightgrey' }}",
              "logo": "package"
            }
          },
          "badge_metadata": {
            "generated_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "workflow_run": "${{ github.run_id }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}"
          }
        }
        EOF
        
    - name: Upload badge data
      uses: actions/upload-artifact@v4
      with:
        name: ci-badges
        path: ci_badges_updated.json

  create-release:
    name: Create Release
    needs: [validate-spec2, build-installer]
    if: github.ref == 'refs/heads/main' && needs.validate-spec2.outputs.validation-status == 'passed' && needs.build-installer.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release tag
      run: |
        TAG="v1.3.0-spec2-$(date +%Y%m%d-%H%M)"
        echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: "SPEC-2 Tauri Installer - ${{ env.RELEASE_TAG }}"
        body: |
          ## SPEC-2 Tauri Memory Integration Release
          
          This release includes the enhanced Hearthlink application with SPEC-2 features:
          
          ### ✨ New Features
          - **Enhanced Task Management**: Mission statements, core values, habit tracking, decision support
          - **Vault Integration**: Encrypted persistent memory with cross-agent synchronization
          - **Memory Debug Tools**: Real-time memory slice inspection and sync status monitoring
          - **Comprehensive Audit Logging**: Full CRUD operation tracking with Vault integration
          
          ### 📦 Installer Assets
          - Validation reports and CI badges included
          - Multi-platform support (Windows, macOS, Linux)
          - Comprehensive checksums for security verification
          
          ### 🔧 Technical Details
          - **Spec Version**: SPEC-2-Tauri-Memory-Integration
          - **LLM Model**: Llama 3.5 micro
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit**: ${{ github.sha }}
          
          See validation report and CI badges in the artifacts.
        draft: false
        prerelease: true

  post-build-validation:
    name: Post-Build Validation
    needs: [validate-spec2, build-installer]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      
    - name: Validate build results
      run: |
        echo "## SPEC-2 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation Status**: ${{ needs.validate-spec2.outputs.validation-status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Status**: ${{ needs.build-installer.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        
        # List artifacts
        echo "### Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
        find . -name "*.deb" -o -name "*.exe" -o -name "*.dmg" -o -name "*.msi" -o -name "*.AppImage" | while read file; do
          echo "- $(basename "$file")" >> $GITHUB_STEP_SUMMARY
        done
        
        if [ "${{ needs.validate-spec2.outputs.validation-status }}" = "passed" ] && [ "${{ needs.build-installer.result }}" = "success" ]; then
          echo "🎉 **SPEC-2 installer build completed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **SPEC-2 installer build failed. Check logs above.**" >> $GITHUB_STEP_SUMMARY
        fi