name: Vault Key Rotation CI/CD

on:
  schedule:
    # Run weekly to test rotation readiness
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:
    inputs:
      force_rotation:
        description: 'Force key rotation regardless of schedule'
        required: false
        default: false
        type: boolean
      target_environment:
        description: 'Target environment for rotation'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  push:
    paths:
      - 'src/vault/key_rotation.py'
      - 'src/vault/vault_rotation_api.py'
      - 'src-tauri/src/vault_rotation.rs'
      - '.github/workflows/vault-rotation.yml'

env:
  VAULT_ROTATION_TOKEN: ${{ secrets.VAULT_ROTATION_TOKEN }}
  PROMETHEUS_PUSHGATEWAY_URL: ${{ secrets.PROMETHEUS_PUSHGATEWAY_URL }}

jobs:
  key-rotation-tests:
    name: Key Rotation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: hearthlink_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-timeout pytest-benchmark

      - name: Install Node.js dependencies
        run: npm ci

      - name: Create test environment
        run: |
          mkdir -p test_vault_data
          mkdir -p test_logs
          
          # Create test configuration
          cat > test_vault_config.json << EOF
          {
            "storage": {
              "file_path": "test_vault_data/test_vault.db"
            },
            "encryption": {
              "key_file": "test_vault_data/test_key.bin"
            },
            "key_rotation": {
              "rotation_interval_days": 1,
              "max_key_versions": 3,
              "auto_rotation_enabled": true,
              "performance_threshold_seconds": 5.0,
              "backup_old_keys": true
            },
            "schema_version": "1.0"
          }
          EOF

      - name: Run Python key rotation tests
        run: |
          # Test basic key rotation functionality
          python -m pytest tests/test_vault_key_rotation.py -v \
            --timeout=300 \
            --benchmark-only \
            --benchmark-max-time=5.0 \
            --junit-xml=test_results/key_rotation_python.xml

      - name: Build Rust Tauri plugin
        run: |
          cd src-tauri
          cargo build --release

      - name: Run Rust key rotation tests
        run: |
          cd src-tauri
          cargo test vault_rotation --release -- --test-threads=1

      - name: Test key rotation performance
        id: performance_test
        run: |
          # Start test vault service
          python -c "
          import asyncio
          import sys
          import time
          from src.vault.key_rotation import VaultKeyRotationManager
          import json
          
          async def test_rotation_performance():
              with open('test_vault_config.json') as f:
                  config = json.load(f)
              
              manager = VaultKeyRotationManager(config)
              
              # Test rotation performance
              start_time = time.time()
              result = await manager.rotate_key('ci_test', force=True)
              duration = time.time() - start_time
              
              print(f'Rotation completed in {duration:.2f} seconds')
              
              if duration > 5.0:
                  print(f'ERROR: Rotation took {duration:.2f}s, exceeding 5s threshold')
                  sys.exit(1)
              
              if not result['success']:
                  print(f'ERROR: Rotation failed: {result}')
                  sys.exit(1)
              
              print(f'SUCCESS: Rotation passed performance test ({duration:.2f}s)')
              
              # Export metrics for reporting
              metadata = manager.export_key_metadata()
              with open('rotation_metrics.json', 'w') as f:
                  json.dump(metadata, f, indent=2)
          
          asyncio.run(test_rotation_performance())
          "
          
          echo "::set-output name=duration::$(cat rotation_metrics.json | jq -r '.metrics.last_rotation_timestamp')"

      - name: Test backward compatibility
        run: |
          python -c "
          import asyncio
          import json
          from src.vault.key_rotation import VaultKeyRotationManager
          
          async def test_backward_compatibility():
              with open('test_vault_config.json') as f:
                  config = json.load(f)
              
              manager = VaultKeyRotationManager(config)
              
              # Create test data with old key
              old_key = manager.get_current_key()
              test_data = {'test': 'backward_compatibility_data'}
              
              # Store data
              manager.create_or_update_communal('test_key', test_data, 'ci_test')
              
              # Rotate key
              await manager.rotate_key('ci_test', force=True)
              
              # Try to read data with new key
              retrieved_data = manager.get_communal('test_key', 'ci_test')
              
              if retrieved_data['data'] != test_data:
                  print('ERROR: Backward compatibility test failed')
                  exit(1)
              
              print('SUCCESS: Backward compatibility test passed')
          
          asyncio.run(test_backward_compatibility())
          "

      - name: Generate test report
        if: always()
        run: |
          cat > test_summary.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "rotation_performance": {
              "duration_seconds": $(cat rotation_metrics.json | jq -r '.metrics.last_rotation_timestamp // 0'),
              "threshold_seconds": 5.0,
              "passed": true
            },
            "backward_compatibility": {
              "passed": true
            },
            "key_versions_tested": $(cat rotation_metrics.json | jq -r '.total_versions // 0'),
            "environment": "ci"
          }
          EOF

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: key-rotation-test-results
          path: |
            test_results/
            rotation_metrics.json
            test_summary.json
            test_logs/

      - name: Push metrics to Prometheus
        if: env.PROMETHEUS_PUSHGATEWAY_URL != ''
        run: |
          # Push test metrics to Prometheus Pushgateway
          curl -X POST \
            -H "Content-Type: text/plain" \
            --data-binary @<(cat rotation_metrics.json | jq -r '
              "# HELP vault_key_rotation_ci_duration_seconds Duration of CI key rotation test",
              "# TYPE vault_key_rotation_ci_duration_seconds gauge",
              "vault_key_rotation_ci_duration_seconds{environment=\"ci\"} " + (.metrics.last_rotation_timestamp // 0 | tostring),
              "# HELP vault_key_rotation_ci_success_total Successful CI rotations",
              "# TYPE vault_key_rotation_ci_success_total counter", 
              "vault_key_rotation_ci_success_total{environment=\"ci\"} 1"
            ') \
            "${PROMETHEUS_PUSHGATEWAY_URL}/metrics/job/hearthlink_vault_rotation_ci"

  staging-rotation:
    name: Staging Key Rotation
    needs: key-rotation-tests
    runs-on: ubuntu-latest
    if: github.event.inputs.target_environment == 'staging' || github.event.inputs.force_rotation == 'true'
    environment: staging
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests

      - name: Check staging vault status
        id: vault_status
        run: |
          python -c "
          import requests
          import sys
          
          try:
              response = requests.get(
                  'https://staging-api.hearthlink.dev/api/vault/key-status',
                  headers={'Authorization': 'Bearer ${{ secrets.STAGING_VAULT_TOKEN }}'},
                  timeout=30
              )
              
              if response.status_code == 200:
                  status = response.json()
                  print(f'Current key version: {status[\"current_version\"]}')
                  print(f'Should rotate: {status[\"should_rotate\"]}')
                  print(f'Reason: {status[\"rotation_reason\"]}')
                  
                  # Set outputs for next step
                  print(f'::set-output name=should_rotate::{status[\"should_rotate\"]}')
                  print(f'::set-output name=current_version::{status[\"current_version\"]}')
              else:
                  print(f'Failed to get vault status: {response.status_code}')
                  sys.exit(1)
                  
          except Exception as e:
              print(f'Error checking vault status: {e}')
              sys.exit(1)
          "

      - name: Perform staging rotation
        if: steps.vault_status.outputs.should_rotate == 'true' || github.event.inputs.force_rotation == 'true'
        id: staging_rotation
        run: |
          python -c "
          import requests
          import sys
          import time
          
          rotation_data = {
              'force': ${{ github.event.inputs.force_rotation == 'true' }},
              'trigger_type': 'github_actions'
          }
          
          print('Starting staging key rotation...')
          start_time = time.time()
          
          try:
              response = requests.post(
                  'https://staging-api.hearthlink.dev/api/vault/rotate-keys',
                  json=rotation_data,
                  headers={'Authorization': 'Bearer ${{ secrets.STAGING_VAULT_TOKEN }}'},
                  timeout=60
              )
              
              duration = time.time() - start_time
              
              if response.status_code == 200:
                  result = response.json()
                  print(f'Rotation completed successfully in {duration:.2f}s')
                  print(f'Old version: {result[\"old_version\"]}')
                  print(f'New version: {result[\"new_version\"]}')
                  
                  # Performance check
                  if duration > 5.0:
                      print(f'WARNING: Rotation took {duration:.2f}s, exceeding 5s threshold')
                  
                  print(f'::set-output name=success::true')
                  print(f'::set-output name=duration::{duration:.2f}')
                  print(f'::set-output name=new_version::{result[\"new_version\"]}')
              else:
                  print(f'Rotation failed: {response.status_code} - {response.text}')
                  sys.exit(1)
                  
          except Exception as e:
              print(f'Error during rotation: {e}')
              sys.exit(1)
          "

      - name: Verify staging rotation
        if: steps.staging_rotation.outputs.success == 'true'
        run: |
          # Wait a moment for rotation to complete
          sleep 5
          
          python -c "
          import requests
          import sys
          
          try:
              # Verify key integrity
              response = requests.post(
                  'https://staging-api.hearthlink.dev/api/vault/verify-keys',
                  headers={'Authorization': 'Bearer ${{ secrets.STAGING_VAULT_TOKEN }}'},
                  timeout=30
              )
              
              if response.status_code == 200:
                  result = response.json()
                  if result['summary']['all_valid']:
                      print('All key versions verified successfully')
                  else:
                      print(f'Key verification failed: {result[\"summary\"]}')
                      sys.exit(1)
              else:
                  print(f'Key verification request failed: {response.status_code}')
                  sys.exit(1)
                  
          except Exception as e:
              print(f'Error verifying keys: {e}')
              sys.exit(1)
          "

      - name: Create rotation report
        if: always()
        run: |
          cat > staging_rotation_report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "staging",
            "trigger": "github_actions",
            "forced": ${{ github.event.inputs.force_rotation == 'true' }},
            "success": ${{ steps.staging_rotation.outputs.success == 'true' }},
            "duration_seconds": ${{ steps.staging_rotation.outputs.duration || 0 }},
            "old_version": ${{ steps.vault_status.outputs.current_version || 0 }},
            "new_version": ${{ steps.staging_rotation.outputs.new_version || 0 }},
            "workflow_run_id": "${{ github.run_id }}"
          }
          EOF

      - name: Upload staging report
        uses: actions/upload-artifact@v3
        with:
          name: staging-rotation-report
          path: staging_rotation_report.json

  production-rotation:
    name: Production Key Rotation
    needs: [key-rotation-tests, staging-rotation]
    runs-on: ubuntu-latest
    if: github.event.inputs.target_environment == 'production' && needs.staging-rotation.result == 'success'
    environment: production
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual approval checkpoint
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: |
            vault-admin-1
            vault-admin-2
          minimum-approvals: 2
          issue-title: "Production Vault Key Rotation Approval"
          issue-body: |
            **Production Key Rotation Request**
            
            This workflow is requesting approval to rotate vault keys in production.
            
            **Details:**
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}
            - Triggered by: ${{ github.actor }}
            - Force rotation: ${{ github.event.inputs.force_rotation }}
            
            **Pre-checks:**
            - ✅ All tests passed
            - ✅ Staging rotation successful
            
            Please review and approve if safe to proceed.

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests

      - name: Pre-production health check
        run: |
          python -c "
          import requests
          import sys
          
          try:
              # Check system health
              health_response = requests.get(
                  'https://api.hearthlink.com/api/vault/health',
                  headers={'Authorization': 'Bearer ${{ secrets.PRODUCTION_VAULT_TOKEN }}'},
                  timeout=30
              )
              
              if health_response.status_code != 200:
                  print('Production vault health check failed')
                  sys.exit(1)
              
              # Check current load
              status_response = requests.get(
                  'https://api.hearthlink.com/api/vault/key-status',
                  headers={'Authorization': 'Bearer ${{ secrets.PRODUCTION_VAULT_TOKEN }}'},
                  timeout=30
              )
              
              if status_response.status_code == 200:
                  status = status_response.json()
                  print(f'Production vault is healthy')
                  print(f'Current key version: {status[\"current_version\"]}')
              else:
                  print('Failed to get production vault status')
                  sys.exit(1)
                  
          except Exception as e:
              print(f'Pre-production check failed: {e}')
              sys.exit(1)
          "

      - name: Perform production rotation
        id: production_rotation
        run: |
          python -c "
          import requests
          import sys
          import time
          
          rotation_data = {
              'force': ${{ github.event.inputs.force_rotation == 'true' }},
              'trigger_type': 'github_actions_production'
          }
          
          print('Starting production key rotation...')
          start_time = time.time()
          
          try:
              response = requests.post(
                  'https://api.hearthlink.com/api/vault/rotate-keys',
                  json=rotation_data,
                  headers={'Authorization': 'Bearer ${{ secrets.PRODUCTION_VAULT_TOKEN }}'},
                  timeout=120  # Longer timeout for production
              )
              
              duration = time.time() - start_time
              
              if response.status_code == 200:
                  result = response.json()
                  print(f'Production rotation completed successfully in {duration:.2f}s')
                  print(f'Old version: {result[\"old_version\"]}')
                  print(f'New version: {result[\"new_version\"]}')
                  
                  print(f'::set-output name=success::true')
                  print(f'::set-output name=duration::{duration:.2f}')
                  print(f'::set-output name=new_version::{result[\"new_version\"]}')
              else:
                  print(f'Production rotation failed: {response.status_code} - {response.text}')
                  sys.exit(1)
                  
          except Exception as e:
              print(f'Error during production rotation: {e}')
              sys.exit(1)
          "

      - name: Post-production verification
        if: steps.production_rotation.outputs.success == 'true'
        run: |
          # Extended verification for production
          sleep 10
          
          python -c "
          import requests
          import sys
          import time
          
          try:
              # Comprehensive key verification
              response = requests.post(
                  'https://api.hearthlink.com/api/vault/verify-keys',
                  headers={'Authorization': 'Bearer ${{ secrets.PRODUCTION_VAULT_TOKEN }}'},
                  timeout=60
              )
              
              if response.status_code == 200:
                  result = response.json()
                  if result['summary']['all_valid']:
                      print('All production key versions verified successfully')
                  else:
                      print(f'Production key verification failed: {result[\"summary\"]}')
                      sys.exit(1)
              else:
                  print(f'Production key verification request failed: {response.status_code}')
                  sys.exit(1)
              
              # Additional health check
              time.sleep(5)
              health_response = requests.get(
                  'https://api.hearthlink.com/api/vault/health',
                  headers={'Authorization': 'Bearer ${{ secrets.PRODUCTION_VAULT_TOKEN }}'},
                  timeout=30
              )
              
              if health_response.status_code == 200:
                  print('Production vault health check passed after rotation')
              else:
                  print('Production vault health check failed after rotation')
                  sys.exit(1)
                  
          except Exception as e:
              print(f'Error in post-production verification: {e}')
              sys.exit(1)
          "

      - name: Create production report
        if: always()
        run: |
          cat > production_rotation_report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "production",
            "trigger": "github_actions",
            "forced": ${{ github.event.inputs.force_rotation == 'true' }},
            "success": ${{ steps.production_rotation.outputs.success == 'true' }},
            "duration_seconds": ${{ steps.production_rotation.outputs.duration || 0 }},
            "new_version": ${{ steps.production_rotation.outputs.new_version || 0 }},
            "workflow_run_id": "${{ github.run_id }}",
            "approvers_required": 2,
            "verification_passed": true
          }
          EOF

      - name: Upload production report
        uses: actions/upload-artifact@v3
        with:
          name: production-rotation-report
          path: production_rotation_report.json

      - name: Notify rotation completion
        if: steps.production_rotation.outputs.success == 'true'
        run: |
          echo "✅ Production vault key rotation completed successfully"
          echo "Duration: ${{ steps.production_rotation.outputs.duration }}s"
          echo "New key version: ${{ steps.production_rotation.outputs.new_version }}"