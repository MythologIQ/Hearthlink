#!/usr/bin/env python3\n\"\"\"\nHearthlink Services Starter\nInitializes and starts all backend services\n\"\"\"\n\nimport os\nimport sys\nimport subprocess\nimport time\nimport signal\nfrom multiprocessing import Process\nfrom pathlib import Path\n\n# Add src to Python path\nsys.path.insert(0, str(Path(__file__).parent / 'src'))\n\ndef start_service(service_name, service_module, port):\n    \"\"\"Start a service in a separate process\"\"\"\n    try:\n        print(f\"Starting {service_name} on port {port}...\")\n        \n        # Change to src/api directory\n        api_dir = Path(__file__).parent / 'src' / 'api'\n        os.chdir(api_dir)\n        \n        # Start the service\n        process = subprocess.Popen(\n            [sys.executable, service_module],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True\n        )\n        \n        return process\n        \n    except Exception as e:\n        print(f\"Failed to start {service_name}: {e}\")\n        return None\n\ndef main():\n    \"\"\"Main startup function\"\"\"\n    print(\"=\" * 60)\n    print(\"HEARTHLINK SERVICES STARTUP\")\n    print(\"=\" * 60)\n    \n    # Services to start\n    services = [\n        (\"System Health API\", \"system_health.py\", 8001),\n        (\"Settings API\", \"settings_api.py\", 8002),\n        (\"Integrated API\", \"integrated_api.py\", 8003)\n    ]\n    \n    processes = []\n    \n    try:\n        # Start all services\n        for service_name, module, port in services:\n            process = start_service(service_name, module, port)\n            if process:\n                processes.append((service_name, process))\n            time.sleep(2)  # Give each service time to start\n        \n        print(\"\\n\" + \"=\" * 60)\n        print(\"SERVICES RUNNING\")\n        print(\"=\" * 60)\n        \n        for service_name, process in processes:\n            if process.poll() is None:\n                print(f\"✓ {service_name} - Running\")\n            else:\n                print(f\"✗ {service_name} - Failed to start\")\n        \n        print(\"\\nAPI Endpoints:\")\n        print(\"  http://localhost:8001 - System Health\")\n        print(\"  http://localhost:8002 - Settings\")\n        print(\"  http://localhost:8003 - Integrated Services\")\n        \n        print(\"\\nPress Ctrl+C to stop all services...\")\n        \n        # Wait for interrupt\n        while True:\n            time.sleep(1)\n            # Check if any process died\n            for service_name, process in processes:\n                if process.poll() is not None:\n                    print(f\"\\n⚠️  {service_name} stopped unexpectedly\")\n                    break\n    \n    except KeyboardInterrupt:\n        print(\"\\n\\nShutting down services...\")\n        \n        # Terminate all processes\n        for service_name, process in processes:\n            if process.poll() is None:\n                print(f\"Stopping {service_name}...\")\n                process.terminate()\n                try:\n                    process.wait(timeout=5)\n                except subprocess.TimeoutExpired:\n                    process.kill()\n                    process.wait()\n        \n        print(\"All services stopped.\")\n    \n    except Exception as e:\n        print(f\"\\nError: {e}\")\n        \n        # Clean up processes\n        for service_name, process in processes:\n            if process.poll() is None:\n                process.terminate()\n                process.wait()\n\nif __name__ == '__main__':\n    main()"