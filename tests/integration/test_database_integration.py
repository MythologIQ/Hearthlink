"""
Database Integration Tests
Generated by SPEC-3 Week 2 Test Suite Expander
"""

import pytest
import asyncio
import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / 'src'))

try:
    from database.database_manager import get_database_manager
    from core.session_manager import get_session_manager, MessageRole
except ImportError as e:
    pytest.skip(f"Cannot import database modules: {e}", allow_module_level=True)


class TestDatabaseIntegration:
    """Integration tests for database functionality"""
    
    @pytest.fixture
    def database_manager(self):
        """Get database manager instance"""
        return get_database_manager()
    
    @pytest.fixture
    def session_manager(self):
        """Get session manager instance"""
        return get_session_manager()
    
    def test_database_connectivity(self, database_manager):
        """Test basic database connectivity"""
        try:
            schema_version = database_manager.get_schema_version()
            assert isinstance(schema_version, int)
            assert schema_version >= 1
        except Exception as e:
            pytest.skip(f"Database not available: {e}")
    
    @pytest.mark.asyncio
    async def test_session_lifecycle_integration(self, session_manager):
        """Test complete session lifecycle integration"""
        try:
            # Create session
            session_id, session_token = await session_manager.create_session(
                user_id="integration_test_user",
                agent_context={"primary_agent": "alden"},
                metadata={"test": "integration"}
            )
            
            assert session_id is not None
            assert session_token is not None
            
            # Add message
            message_id = await session_manager.add_conversation_message(
                session_token=session_token,
                agent_id="alden",
                role=MessageRole.USER,
                content="Integration test message"
            )
            
            assert message_id is not None
            
            # Verify message persistence
            # This would require implementing message retrieval
            # For now, just verify the operations completed successfully
            assert True
            
        except Exception as e:
            pytest.skip(f"Session integration test requires full environment: {e}")
    
    @pytest.mark.asyncio
    async def test_concurrent_database_operations(self, session_manager):
        """Test concurrent database operations"""
        try:
            # Create multiple sessions concurrently
            tasks = []
            for i in range(5):
                task = session_manager.create_session(
                    user_id=f"concurrent_test_user_{i}",
                    agent_context={"primary_agent": "alden"},
                    metadata={"test": "concurrent", "index": i}
                )
                tasks.append(task)
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Verify most operations succeeded
            successful_results = [r for r in results if not isinstance(r, Exception)]
            assert len(successful_results) >= 3  # At least 3 of 5 should succeed
            
        except Exception as e:
            pytest.skip(f"Concurrent test requires database: {e}")
    
    def test_database_error_handling(self, database_manager):
        """Test database error handling"""
        try:
            # Test with invalid operations
            # This is a placeholder - actual implementation would test specific errors
            schema_version = database_manager.get_schema_version()
            assert isinstance(schema_version, int)
            
        except Exception as e:
            # Error handling should be graceful
            assert isinstance(e, (ConnectionError, RuntimeError, ValueError))
