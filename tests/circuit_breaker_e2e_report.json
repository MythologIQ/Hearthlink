{
  "test_suite": "circuit_breaker_end_to_end",
  "timestamp": "2025-07-20T12:47:46.019237",
  "summary": {
    "total_test_categories": 4,
    "passed": 2,
    "failed": 2,
    "other": 0,
    "success_rate": 50.0
  },
  "test_results": {
    "python_backend": "FAILED",
    "javascript_dashboard": "FAILED",
    "integration_scenarios": "PASSED",
    "performance_scenarios": "PASSED"
  },
  "test_logs": [
    "[12:47:29] INFO: \ud83d\udd04 Starting Comprehensive Circuit Breaker End-to-End Tests",
    "[12:47:29] INFO: ======================================================================",
    "[12:47:29] INFO: Starting test services for circuit breaker testing...",
    "[12:47:29] INFO: Starting mock services for testing...",
    "[12:47:30] INFO: Mock service started on port 8001",
    "[12:47:31] INFO: Mock service started on port 8000",
    "[12:47:32] INFO: Mock service started on port 8002",
    "[12:47:34] INFO: Running Python circuit breaker backend tests...",
    "[12:47:42] ERROR: Python backend tests: FAILED",
    "[12:47:42] ERROR: Error output: Circuit breaker 'test_service' recorded failure: Service unavailable\nCircuit breaker 'test_service' recorded failure: Service unavailable\nCircuit breaker 'test_service' recorded failure: Service unavailable\nCircuit breaker 'test_service' is OPEN, blocking request\nCircuit breaker 'test_service' is OPEN, blocking request\nCircuit breaker 'test_service' is OPEN, blocking request\nCircuit breaker 'recovery_test' recorded failure: Service down\nCircuit breaker 'recovery_test' recorded failure: Service down\nCircuit breaker 'recovery_test' is OPEN, blocking request\nCircuit breaker 'half_open_test' recorded failure: Fail\nCircuit breaker 'half_open_test' recorded failure: Fail\nCircuit breaker 'half_open_test' is OPEN, blocking request\nCircuit breaker 'half_open_test' recorded failure: Still failing\nCircuit breaker 'concurrent_test' recorded failure: Random failure\nException in thread Thread-3 (<lambda>):\nTraceback (most recent call last):\n  File \"/usr/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\nCircuit breaker 'concurrent_test' recorded failure: Random failure\n  File \"/usr/lib/python3.10/threading.py\", line 953, in run\nException in thread Thread-8 (<lambda>):\nTraceback (most recent call last):\n  File \"/usr/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\nCircuit breaker 'concurrent_test' recorded failure: Random failure\nException in thread Thread-11 (<lambda>):\nTraceback (most recent call last):\n  File \"/usr/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/usr/lib/python3.10/threading.py\", line 953, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/mnt/g/mythologiq/hearthlink/tests/test_circuit_breaker_failover.py\", line 216, in <lambda>\nCircuit breaker 'concurrent_test' recorded failure: Random failure\nException in thread Thread-17 (<lambda>):\nTraceback (most recent call last):\n    self.run()\n  File \"/usr/lib/python3.10/threading.py\", line 953, in run\n  File \"/usr/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self._target(*self._args, **self._kwargs)\n  File \"/mnt/g/mythologiq/hearthlink/tests/test_circuit_breaker_failover.py\", line 216, in <lambda>\n    target=lambda: breaker.call(concurrent_service) if breaker.state != CircuitState.OPEN else None\n  File \"/mnt/g/mythologiq/hearthlink/tests/../src/utils/circuit_breaker.py\", line 142, in call\n    target=lambda: breaker.call(concurrent_service) if breaker.state != CircuitState.OPEN else None\n  File \"/mnt/g/mythologiq/hearthlink/tests/../src/utils/circuit_breaker.py\", line 142, in call\n    result = func(*args, **kwargs)\n  File \"/mnt/g/mythologiq/hearthlink/tests/test_circuit_breaker_failover.py\", line 206, in concurrent_service\n    self.run()\n  File \"/usr/lib/python3.10/threading.py\", line 953, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/mnt/g/mythologiq/hearthlink/tests/test_circuit_breaker_failover.py\", line 216, in <lambda>\n    self._target(*self._args, **self._kwargs)\n  File \"/mnt/g/mythologiq/hearthlink/tests/test_circuit_breaker_failover.py\", line 216, in <lambda>\n    raise Exception(\"Random failure\")\nException: Random failure\n    target=lambda: breaker.call(concurrent_service) if breaker.state != CircuitState.OPEN else None\n  File \"/mnt/g/mythologiq/hearthlink/tests/../src/utils/circuit_breaker.py\", line 142, in call\n    target=lambda: breaker.call(concurrent_service) if breaker.state != CircuitState.OPEN else None\n  File \"/mnt/g/mythologiq/hearthlink/tests/../src/utils/circuit_breaker.py\", line 142, in call\n    result = func(*args, **kwargs)\n  File \"/mnt/g/mythologiq/hearthlink/tests/test_circuit_breaker_failover.py\", line 206, in concurrent_service\n    result = func(*args, **kwargs)\n  File \"/mnt/g/mythologiq/hearthlink/tests/test_circuit_breaker_failover.py\", line 206, in concurrent_service\n    raise Exception(\"Random failure\")\nException: Random failure\n    raise Exception(\"Random failure\")\nException: Random failure\n    result = func(*args, **kwargs)\n  File \"/mnt/g/mythologiq/hearthlink/tests/test_circuit_breaker_failover.py\", line 206, in concurrent_service\n    raise Exception(\"Random failure\")\nException: Random failure\nCircuit breaker 'core-api' recorded failure: Service down\nCircuit breaker 'core-api' recorded failure: Service down\nCircuit breaker 'core-api' is OPEN, blocking request\nCircuit breaker 'vault-api' recorded failure: Service down\nCircuit breaker 'manual_test' recorded failure: Fail\nCircuit breaker 'manual_test' recorded failure: Fail\nCircuit breaker 'manual_test' is OPEN, blocking request\nCircuit breaker 'timeout_test' recorded failure: Request timeout after 2.00s\nCircuit breaker 'metrics_test' recorded failure: fail\nCircuit breaker 'metrics_test' recorded failure: fail\nCircuit breaker 'metrics_test' recorded failure: fail\nCircuit breaker 'service1' is OPEN, blocking request\nCircuit breaker 'service2' is OPEN, blocking request\nCircuit breaker 'service3' is OPEN, blocking request\nCircuit breaker 'health_test' recorded failure: occasional fail\nCircuit breaker 'health_test' recorded failure: occasional fail\nCircuit breaker 'health_test' recorded failure: fail\nCircuit breaker 'health_test' is OPEN, blocking request\nCircuit breaker 'health_test' is OPEN, blocking request\n",
    "[12:47:42] INFO: Running JavaScript dashboard integration tests...",
    "[12:47:45] ERROR: JavaScript dashboard tests: FAILED",
    "[12:47:45] ERROR: Error output: /mnt/g/mythologiq/hearthlink/tests/test_circuit_breaker_dashboard.js:28\ndescribe('Circuit Breaker Dashboard Integration', () => {\n^\n\nReferenceError: describe is not defined\n    at Object.<anonymous> (/mnt/g/mythologiq/hearthlink/tests/test_circuit_breaker_dashboard.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1529:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1613:10)\n    at Module.load (node:internal/modules/cjs/loader:1275:32)\n    at Module._load (node:internal/modules/cjs/loader:1096:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:164:12)\n    at node:internal/main/run_main_module:28:49\n\nNode.js v20.19.3\n",
    "[12:47:45] INFO: Running integration scenario tests...",
    "[12:47:45] INFO: Testing service failure detection integration...",
    "[12:47:45] INFO: Testing service recovery integration...",
    "[12:47:45] INFO: Testing multiple service monitoring...",
    "[12:47:45] INFO: Successfully monitored 3 services",
    "[12:47:45] SUCCESS: Integration scenario tests: PASSED",
    "[12:47:45] INFO:   \u2705 service_failure_trigger: PASSED",
    "[12:47:45] INFO:   \u2705 dashboard_failure_detection: PASSED",
    "[12:47:45] INFO:   \u2705 service_recovery_trigger: PASSED",
    "[12:47:45] INFO:   \u2705 dashboard_recovery_detection: PASSED",
    "[12:47:45] INFO:   \u2705 multiple_service_monitoring: PASSED",
    "[12:47:45] INFO: Running performance scenario tests...",
    "[12:47:45] INFO: Testing concurrent request performance...",
    "[12:47:46] SUCCESS: Performance scenario tests: PASSED",
    "[12:47:46] INFO:   Success rate: 100.0%, Time: 0.29s",
    "[12:47:46] INFO: Generating comprehensive test report..."
  ],
  "recommendations": [
    "Fix Python backend circuit breaker implementation issues",
    "Address JavaScript dashboard integration problems"
  ]
}