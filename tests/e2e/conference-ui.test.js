/**\n * End-to-End Tests for Conference UI\n * \n * Tests all critical functionality of the Conference UI including:\n * - Modal agent selection with proper text entry\n * - Agent activation box positioning\n * - Session joining functionality\n * - Quick session agent addition\n * - Direct messages functionality\n * - Chat interface\n * \n * Uses Playwright for comprehensive browser automation and testing\n */\n\nconst { test, expect } = require('@playwright/test');\n\nclass ConferenceUIPage {\n  constructor(page) {\n    this.page = page;\n    \n    // Selectors\n    this.conferenceTab = 'button[data-testid=\"conference-tab\"]';\n    this.newSessionBtn = 'button:has-text(\"New Session\")';\n    this.customSessionOption = '.option-card:has-text(\"Custom Session\")';\n    this.quickSessionOption = '.option-card:has-text(\"Quick Session\")';\n    this.sessionNameInput = 'input[id=\"sessionName\"]';\n    this.agentCheckbox = '.agent-checkbox input[type=\"checkbox\"]';\n    this.createSessionBtn = 'button:has-text(\"Create Session\")';\n    this.sessionItem = '.session-item';\n    this.messageInput = '.message-input';\n    this.sendBtn = '.send-btn';\n    this.dmItem = '.dm-item';\n    this.participantCard = '.participant-card';\n    this.messagesContainer = '.messages-container';\n    this.leaveBtn = 'button:has-text(\"Leave\")';\n    this.testProtocolBtn = 'button:has-text(\"Test Protocol\")';\n  }\n\n  async navigateToConference() {\n    // Navigate to Core module first\n    await this.page.goto('http://localhost:3000/core');\n    await this.page.waitForSelector('.core-interface');\n    \n    // Click on Conference tab\n    await this.page.click(this.conferenceTab);\n    await this.page.waitForSelector('.conference-section.modern-conference');\n  }\n\n  async createCustomSession(sessionName, agentCount = 2) {\n    // Click New Session button\n    await this.page.click(this.newSessionBtn);\n    await this.page.waitForSelector('.create-session-modal');\n    \n    // Click Custom Session option\n    await this.page.click(this.customSessionOption);\n    await this.page.waitForSelector('.agent-selection-modal');\n    \n    // Enter session name\n    await this.page.fill(this.sessionNameInput, sessionName);\n    \n    // Select agents\n    const agentCheckboxes = await this.page.locator(this.agentCheckbox).all();\n    for (let i = 0; i < Math.min(agentCount, agentCheckboxes.length); i++) {\n      await agentCheckboxes[i].check();\n    }\n    \n    // Create session\n    await this.page.click(this.createSessionBtn);\n    await this.page.waitForSelector('.session-item');\n  }\n\n  async createQuickSession() {\n    // Click New Session button\n    await this.page.click(this.newSessionBtn);\n    await this.page.waitForSelector('.create-session-modal');\n    \n    // Click Quick Session option\n    await this.page.click(this.quickSessionOption);\n    await this.page.waitForSelector('.session-item');\n  }\n\n  async sendMessage(message) {\n    await this.page.fill(this.messageInput, message);\n    await this.page.click(this.sendBtn);\n  }\n\n  async waitForMessage(messageText) {\n    await this.page.waitForSelector(`.message:has-text(\"${messageText}\")`);\n  }\n\n  async selectSession(sessionName) {\n    await this.page.click(`.session-item:has-text(\"${sessionName}\")`);\n    await this.page.waitForSelector('.session-header-bar');\n  }\n\n  async openDirectMessage(agentName) {\n    await this.page.click(`.dm-item:has-text(\"${agentName}\")`);\n    await this.page.waitForSelector('.session-header-bar');\n  }\n\n  async leaveSession() {\n    await this.page.click(this.leaveBtn);\n  }\n\n  async getSessionCount() {\n    return await this.page.locator(this.sessionItem).count();\n  }\n\n  async getMessageCount() {\n    return await this.page.locator('.message').count();\n  }\n\n  async getParticipantCount() {\n    return await this.page.locator(this.participantCard).count();\n  }\n\n  async isElementVisible(selector) {\n    return await this.page.isVisible(selector);\n  }\n\n  async getElementText(selector) {\n    return await this.page.textContent(selector);\n  }\n\n  async clickElement(selector) {\n    await this.page.click(selector);\n  }\n\n  async waitForElementVisible(selector, timeout = 5000) {\n    await this.page.waitForSelector(selector, { timeout });\n  }\n\n  async waitForElementHidden(selector, timeout = 5000) {\n    await this.page.waitForSelector(selector, { state: 'hidden', timeout });\n  }\n\n  async takeScreenshot(name) {\n    await this.page.screenshot({ path: `tests/screenshots/conference-${name}.png` });\n  }\n}\n\n// Test Setup\ntest.describe('Conference UI E2E Tests', () => {\n  let page;\n  let conferencePage;\n\n  test.beforeEach(async ({ browser }) => {\n    page = await browser.newPage();\n    conferencePage = new ConferenceUIPage(page);\n    \n    // Set viewport for consistent testing\n    await page.setViewportSize({ width: 1280, height: 720 });\n    \n    // Navigate to conference\n    await conferencePage.navigateToConference();\n  });\n\n  test.afterEach(async () => {\n    await page.close();\n  });\n\n  test.describe('Modal Agent Selection', () => {\n    test('should allow text entry in session name field', async () => {\n      // Navigate to agent selection modal\n      await conferencePage.clickElement(conferencePage.newSessionBtn);\n      await conferencePage.waitForElementVisible('.create-session-modal');\n      \n      await conferencePage.clickElement(conferencePage.customSessionOption);\n      await conferencePage.waitForElementVisible('.agent-selection-modal');\n      \n      // Test session name input\n      const sessionName = 'Test Session - Agent Selection';\n      await page.fill(conferencePage.sessionNameInput, sessionName);\n      \n      // Verify text was entered correctly\n      const inputValue = await page.inputValue(conferencePage.sessionNameInput);\n      expect(inputValue).toBe(sessionName);\n      \n      // Verify input is focused and responsive\n      await page.focus(conferencePage.sessionNameInput);\n      await page.keyboard.press('Control+a');\n      await page.keyboard.type('Modified Session Name');\n      \n      const modifiedValue = await page.inputValue(conferencePage.sessionNameInput);\n      expect(modifiedValue).toBe('Modified Session Name');\n      \n      await conferencePage.takeScreenshot('agent-selection-text-entry');\n    });\n\n    test('should have properly positioned agent activation checkboxes', async () => {\n      await conferencePage.clickElement(conferencePage.newSessionBtn);\n      await conferencePage.waitForElementVisible('.create-session-modal');\n      \n      await conferencePage.clickElement(conferencePage.customSessionOption);\n      await conferencePage.waitForElementVisible('.agent-selection-modal');\n      \n      // Fill session name\n      await page.fill(conferencePage.sessionNameInput, 'Checkbox Test Session');\n      \n      // Test checkbox positioning and click accuracy\n      const checkboxes = await page.locator(conferencePage.agentCheckbox).all();\n      \n      for (let i = 0; i < Math.min(3, checkboxes.length); i++) {\n        const checkbox = checkboxes[i];\n        \n        // Get checkbox bounding box\n        const boundingBox = await checkbox.boundingBox();\n        expect(boundingBox).toBeTruthy();\n        \n        // Verify checkbox is visible and clickable\n        await expect(checkbox).toBeVisible();\n        await expect(checkbox).toBeEnabled();\n        \n        // Test exact click (not offset)\n        await checkbox.check();\n        await expect(checkbox).toBeChecked();\n        \n        // Test uncheck\n        await checkbox.uncheck();\n        await expect(checkbox).not.toBeChecked();\n        \n        // Test click via coordinates (center of checkbox)\n        const centerX = boundingBox.x + boundingBox.width / 2;\n        const centerY = boundingBox.y + boundingBox.height / 2;\n        await page.mouse.click(centerX, centerY);\n        await expect(checkbox).toBeChecked();\n      }\n      \n      await conferencePage.takeScreenshot('agent-checkbox-positioning');\n    });\n\n    test('should create session with selected agents', async () => {\n      const sessionName = 'Test Agent Selection Session';\n      await conferencePage.createCustomSession(sessionName, 2);\n      \n      // Verify session was created\n      await conferencePage.waitForElementVisible('.session-item');\n      const sessionExists = await conferencePage.isElementVisible(`.session-item:has-text(\"${sessionName}\")`);\n      expect(sessionExists).toBeTruthy();\n      \n      // Verify session count increased\n      const sessionCount = await conferencePage.getSessionCount();\n      expect(sessionCount).toBeGreaterThan(0);\n      \n      await conferencePage.takeScreenshot('session-created-with-agents');\n    });\n  });\n\n  test.describe('Session Joining Functionality', () => {\n    test('should successfully join a session', async () => {\n      // Create a session first\n      const sessionName = 'Test Join Session';\n      await conferencePage.createCustomSession(sessionName, 1);\n      \n      // Click to join the session\n      await conferencePage.selectSession(sessionName);\n      \n      // Verify session is active\n      await conferencePage.waitForElementVisible('.session-header-bar');\n      const sessionTitle = await conferencePage.getElementText('.session-title');\n      expect(sessionTitle).toBe(sessionName);\n      \n      // Verify participants are displayed\n      const participantCount = await conferencePage.getParticipantCount();\n      expect(participantCount).toBeGreaterThan(0);\n      \n      // Verify messages panel is displayed\n      const messagesVisible = await conferencePage.isElementVisible('.messages-panel');\n      expect(messagesVisible).toBeTruthy();\n      \n      await conferencePage.takeScreenshot('session-joined-successfully');\n    });\n\n    test('should display correct session information', async () => {\n      const sessionName = 'Detailed Session Info Test';\n      await conferencePage.createCustomSession(sessionName, 2);\n      await conferencePage.selectSession(sessionName);\n      \n      // Verify session details\n      await conferencePage.waitForElementVisible('.session-details');\n      \n      const sessionDetailsVisible = await conferencePage.isElementVisible('.session-details');\n      expect(sessionDetailsVisible).toBeTruthy();\n      \n      // Verify participant count display\n      const participantInfo = await conferencePage.getElementText('.session-details');\n      expect(participantInfo).toContain('agents');\n      \n      // Verify status badge\n      const statusBadge = await conferencePage.isElementVisible('.status-badge.active');\n      expect(statusBadge).toBeTruthy();\n      \n      await conferencePage.takeScreenshot('session-information-display');\n    });\n  });\n\n  test.describe('Quick Session Functionality', () => {\n    test('should create quick session with all active agents', async () => {\n      // Create quick session\n      await conferencePage.createQuickSession();\n      \n      // Verify quick session was created\n      await conferencePage.waitForElementVisible('.session-item');\n      const sessionExists = await conferencePage.isElementVisible('.session-item:has-text(\"Quick Session\")');\n      expect(sessionExists).toBeTruthy();\n      \n      // Verify session has participants\n      const participantCount = await conferencePage.getParticipantCount();\n      expect(participantCount).toBeGreaterThan(0);\n      \n      // Verify welcome message\n      const welcomeMessageVisible = await conferencePage.isElementVisible('.message:has-text(\"Welcome\")');\n      expect(welcomeMessageVisible).toBeTruthy();\n      \n      await conferencePage.takeScreenshot('quick-session-created');\n    });\n\n    test('should handle no active agents scenario', async () => {\n      // This test assumes we can simulate no active agents\n      // In a real scenario, this would involve mocking the agent discovery\n      \n      await conferencePage.clickElement(conferencePage.newSessionBtn);\n      await conferencePage.waitForElementVisible('.create-session-modal');\n      \n      // Check if quick session shows appropriate status when no agents\n      const quickSessionCard = await page.locator(conferencePage.quickSessionOption);\n      const cardText = await quickSessionCard.textContent();\n      \n      // The UI should show agent count or warning\n      expect(cardText).toContain('agents');\n      \n      await conferencePage.takeScreenshot('quick-session-no-agents');\n    });\n  });\n\n  test.describe('Direct Messages Functionality', () => {\n    test('should open direct message session', async () => {\n      // First ensure there are active agents by creating a session\n      await conferencePage.createCustomSession('Setup Session', 1);\n      \n      // Look for active agents in DM panel\n      const dmItems = await page.locator('.dm-item').all();\n      \n      if (dmItems.length > 0) {\n        // Click on first available agent\n        await dmItems[0].click();\n        \n        // Verify DM session was created\n        await conferencePage.waitForElementVisible('.session-header-bar');\n        const sessionTitle = await conferencePage.getElementText('.session-title');\n        expect(sessionTitle).toContain('DM with');\n        \n        // Verify it's a 2-participant session (user + agent)\n        const participantCount = await conferencePage.getParticipantCount();\n        expect(participantCount).toBe(2);\n        \n        await conferencePage.takeScreenshot('direct-message-session');\n      }\n    });\n\n    test('should display active agents in DM panel', async () => {\n      // Create session to ensure agents are active\n      await conferencePage.createCustomSession('DM Test Session', 2);\n      \n      // Check DM panel\n      const dmPanelVisible = await conferencePage.isElementVisible('.dm-container');\n      expect(dmPanelVisible).toBeTruthy();\n      \n      // Verify DM items are displayed\n      const dmItems = await page.locator('.dm-item').count();\n      expect(dmItems).toBeGreaterThan(0);\n      \n      await conferencePage.takeScreenshot('dm-panel-with-agents');\n    });\n  });\n\n  test.describe('Chat Interface', () => {\n    test('should send and display messages correctly', async () => {\n      // Create session\n      const sessionName = 'Chat Test Session';\n      await conferencePage.createCustomSession(sessionName, 1);\n      await conferencePage.selectSession(sessionName);\n      \n      // Send test message\n      const testMessage = 'Hello from E2E test!';\n      await conferencePage.sendMessage(testMessage);\n      \n      // Verify message appears\n      await conferencePage.waitForMessage(testMessage);\n      \n      // Verify message structure\n      const messageVisible = await conferencePage.isElementVisible('.message');\n      expect(messageVisible).toBeTruthy();\n      \n      // Verify message content\n      const messageContent = await conferencePage.getElementText('.message-content');\n      expect(messageContent).toContain(testMessage);\n      \n      await conferencePage.takeScreenshot('chat-message-sent');\n    });\n\n    test('should handle Enter key for sending messages', async () => {\n      // Create session\n      await conferencePage.createCustomSession('Enter Key Test', 1);\n      await conferencePage.selectSession('Enter Key Test');\n      \n      // Type message and press Enter\n      await page.fill(conferencePage.messageInput, 'Test Enter key');\n      await page.press(conferencePage.messageInput, 'Enter');\n      \n      // Verify message was sent\n      await conferencePage.waitForMessage('Test Enter key');\n      \n      // Verify input was cleared\n      const inputValue = await page.inputValue(conferencePage.messageInput);\n      expect(inputValue).toBe('');\n      \n      await conferencePage.takeScreenshot('enter-key-message-send');\n    });\n\n    test('should display message timestamps and sender info', async () => {\n      // Create session\n      await conferencePage.createCustomSession('Timestamp Test', 1);\n      await conferencePage.selectSession('Timestamp Test');\n      \n      // Send message\n      await conferencePage.sendMessage('Timestamp test message');\n      await conferencePage.waitForMessage('Timestamp test message');\n      \n      // Verify message meta information\n      const senderNameVisible = await conferencePage.isElementVisible('.sender-name');\n      expect(senderNameVisible).toBeTruthy();\n      \n      const timestampVisible = await conferencePage.isElementVisible('.message-timestamp');\n      expect(timestampVisible).toBeTruthy();\n      \n      await conferencePage.takeScreenshot('message-with-metadata');\n    });\n\n    test('should handle empty message input', async () => {\n      // Create session\n      await conferencePage.createCustomSession('Empty Message Test', 1);\n      await conferencePage.selectSession('Empty Message Test');\n      \n      // Try to send empty message\n      await page.fill(conferencePage.messageInput, '');\n      const sendButtonDisabled = await page.isDisabled(conferencePage.sendBtn);\n      expect(sendButtonDisabled).toBeTruthy();\n      \n      // Try to send whitespace-only message\n      await page.fill(conferencePage.messageInput, '   ');\n      const sendButtonStillDisabled = await page.isDisabled(conferencePage.sendBtn);\n      expect(sendButtonStillDisabled).toBeTruthy();\n      \n      await conferencePage.takeScreenshot('empty-message-handling');\n    });\n  });\n\n  test.describe('Session Management', () => {\n    test('should leave session successfully', async () => {\n      // Create and join session\n      const sessionName = 'Leave Test Session';\n      await conferencePage.createCustomSession(sessionName, 1);\n      await conferencePage.selectSession(sessionName);\n      \n      // Leave session\n      await conferencePage.leaveSession();\n      \n      // Verify session is no longer active\n      await conferencePage.waitForElementVisible('.no-session-state');\n      const noSessionVisible = await conferencePage.isElementVisible('.no-session-state');\n      expect(noSessionVisible).toBeTruthy();\n      \n      await conferencePage.takeScreenshot('session-left-successfully');\n    });\n\n    test('should handle multiple concurrent sessions', async () => {\n      // Create multiple sessions\n      await conferencePage.createCustomSession('Session 1', 1);\n      await conferencePage.createCustomSession('Session 2', 1);\n      await conferencePage.createQuickSession();\n      \n      // Verify all sessions are listed\n      const sessionCount = await conferencePage.getSessionCount();\n      expect(sessionCount).toBe(3);\n      \n      // Switch between sessions\n      await conferencePage.selectSession('Session 1');\n      let sessionTitle = await conferencePage.getElementText('.session-title');\n      expect(sessionTitle).toBe('Session 1');\n      \n      await conferencePage.selectSession('Session 2');\n      sessionTitle = await conferencePage.getElementText('.session-title');\n      expect(sessionTitle).toBe('Session 2');\n      \n      await conferencePage.takeScreenshot('multiple-sessions-management');\n    });\n  });\n\n  test.describe('UI Responsiveness and Accessibility', () => {\n    test('should be responsive on different screen sizes', async () => {\n      // Test desktop view\n      await page.setViewportSize({ width: 1920, height: 1080 });\n      await conferencePage.takeScreenshot('desktop-view');\n      \n      // Test tablet view\n      await page.setViewportSize({ width: 768, height: 1024 });\n      await conferencePage.takeScreenshot('tablet-view');\n      \n      // Test mobile view\n      await page.setViewportSize({ width: 375, height: 667 });\n      await conferencePage.takeScreenshot('mobile-view');\n      \n      // Verify layout adjusts\n      const conferenceSectionVisible = await conferencePage.isElementVisible('.conference-section');\n      expect(conferenceSectionVisible).toBeTruthy();\n    });\n\n    test('should support keyboard navigation', async () => {\n      // Create session for testing\n      await conferencePage.createCustomSession('Keyboard Test', 1);\n      await conferencePage.selectSession('Keyboard Test');\n      \n      // Test tab navigation\n      await page.keyboard.press('Tab');\n      await page.keyboard.press('Tab');\n      await page.keyboard.press('Tab');\n      \n      // Test Enter key on focused elements\n      await page.focus(conferencePage.messageInput);\n      await page.keyboard.type('Keyboard navigation test');\n      await page.keyboard.press('Enter');\n      \n      // Verify message was sent\n      await conferencePage.waitForMessage('Keyboard navigation test');\n      \n      await conferencePage.takeScreenshot('keyboard-navigation');\n    });\n  });\n\n  test.describe('Test Protocol Functionality', () => {\n    test('should execute test protocol successfully', async () => {\n      // Click test protocol button\n      await conferencePage.clickElement(conferencePage.testProtocolBtn);\n      \n      // Verify test session was created or message was sent\n      await page.waitForTimeout(2000); // Wait for test protocol to complete\n      \n      // Check if test room was created\n      const testRoomVisible = await conferencePage.isElementVisible('.session-item:has-text(\"Test\")');\n      \n      if (testRoomVisible) {\n        // Verify test messages appear\n        await conferencePage.selectSession('Multi-Agent Test Room');\n        const testMessageVisible = await conferencePage.isElementVisible('.message:has-text(\"@alden\")');\n        expect(testMessageVisible).toBeTruthy();\n      }\n      \n      await conferencePage.takeScreenshot('test-protocol-executed');\n    });\n  });\n\n  test.describe('Error Handling and Edge Cases', () => {\n    test('should handle session creation with invalid data', async () => {\n      // Try to create session without name\n      await conferencePage.clickElement(conferencePage.newSessionBtn);\n      await conferencePage.waitForElementVisible('.create-session-modal');\n      \n      await conferencePage.clickElement(conferencePage.customSessionOption);\n      await conferencePage.waitForElementVisible('.agent-selection-modal');\n      \n      // Try to create without session name\n      const createButtonDisabled = await page.isDisabled(conferencePage.createSessionBtn);\n      expect(createButtonDisabled).toBeTruthy();\n      \n      // Try to create without agents selected\n      await page.fill(conferencePage.sessionNameInput, 'No Agents Test');\n      const stillDisabled = await page.isDisabled(conferencePage.createSessionBtn);\n      expect(stillDisabled).toBeTruthy();\n      \n      await conferencePage.takeScreenshot('invalid-session-creation');\n    });\n\n    test('should handle network errors gracefully', async () => {\n      // This test would simulate network failures\n      // In a real implementation, you'd mock network responses\n      \n      // Create session\n      await conferencePage.createCustomSession('Network Test', 1);\n      await conferencePage.selectSession('Network Test');\n      \n      // Send message (will fall back to local if API fails)\n      await conferencePage.sendMessage('Network error test message');\n      \n      // Verify message appears even with network issues\n      await conferencePage.waitForMessage('Network error test message');\n      \n      await conferencePage.takeScreenshot('network-error-handling');\n    });\n  });\n});\n\n// Performance Tests\ntest.describe('Conference UI Performance Tests', () => {\n  test('should load conference interface quickly', async ({ page }) => {\n    const conferencePage = new ConferenceUIPage(page);\n    \n    const startTime = Date.now();\n    await conferencePage.navigateToConference();\n    const loadTime = Date.now() - startTime;\n    \n    expect(loadTime).toBeLessThan(3000); // Should load within 3 seconds\n  });\n\n  test('should handle large number of messages efficiently', async ({ page }) => {\n    const conferencePage = new ConferenceUIPage(page);\n    await conferencePage.navigateToConference();\n    \n    // Create session\n    await conferencePage.createCustomSession('Performance Test', 1);\n    await conferencePage.selectSession('Performance Test');\n    \n    // Send multiple messages quickly\n    const messageCount = 20;\n    const startTime = Date.now();\n    \n    for (let i = 0; i < messageCount; i++) {\n      await conferencePage.sendMessage(`Performance test message ${i + 1}`);\n      await page.waitForTimeout(100); // Small delay between messages\n    }\n    \n    const totalTime = Date.now() - startTime;\n    expect(totalTime).toBeLessThan(10000); // Should complete within 10 seconds\n    \n    // Verify all messages are displayed\n    const displayedMessages = await conferencePage.getMessageCount();\n    expect(displayedMessages).toBeGreaterThanOrEqual(messageCount);\n    \n    await conferencePage.takeScreenshot('performance-test-messages');\n  });\n});\n\n// Accessibility Tests\ntest.describe('Conference UI Accessibility Tests', () => {\n  test('should have proper ARIA labels and roles', async ({ page }) => {\n    const conferencePage = new ConferenceUIPage(page);\n    await conferencePage.navigateToConference();\n    \n    // Check for ARIA labels on interactive elements\n    await page.evaluate(() => {\n      const buttons = document.querySelectorAll('button');\n      buttons.forEach(button => {\n        if (!button.textContent.trim() && !button.getAttribute('aria-label')) {\n          throw new Error(`Button without text or aria-label: ${button.outerHTML}`);\n        }\n      });\n    });\n    \n    // Check for form labels\n    await page.evaluate(() => {\n      const inputs = document.querySelectorAll('input');\n      inputs.forEach(input => {\n        const label = document.querySelector(`label[for=\"${input.id}\"]`);\n        if (!label && !input.getAttribute('aria-label') && !input.getAttribute('placeholder')) {\n          throw new Error(`Input without label: ${input.outerHTML}`);\n        }\n      });\n    });\n  });\n\n  test('should support screen reader navigation', async ({ page }) => {\n    const conferencePage = new ConferenceUIPage(page);\n    await conferencePage.navigateToConference();\n    \n    // Test focus management\n    await page.keyboard.press('Tab');\n    const focusedElement = await page.evaluate(() => document.activeElement.tagName);\n    expect(['BUTTON', 'INPUT', 'A'].includes(focusedElement)).toBeTruthy();\n    \n    await conferencePage.takeScreenshot('accessibility-focus-test');\n  });\n});\n\n// Export for use in other test files\nmodule.exports = { ConferenceUIPage };"