#!/usr/bin/env python3\n\"\"\"\nTest Connections Script\nQuick test of all service connections\n\"\"\"\n\nimport sys\nimport asyncio\nfrom pathlib import Path\n\n# Add src to path\nsys.path.insert(0, str(Path(__file__).parent / 'src'))\n\nfrom api.llm_connector import LLMConnector\nfrom api.synapse_connector import SynapseConnector\nfrom api.claude_code_cli import ClaudeCodeCLI\nfrom api.settings_api import load_settings\n\nasync def test_ollama():\n    \"\"\"Test Ollama connection\"\"\"\n    print(\"Testing Ollama connection...\")\n    \n    connector = LLMConnector()\n    connected = await connector.check_ollama_connection()\n    \n    if connected:\n        print(f\"‚úì Ollama connected - {len(connector.available_models)} models available\")\n        for model in connector.available_models:\n            print(f\"  - {model}\")\n        \n        # Test generation\n        print(\"\\nTesting model generation...\")\n        if connector.available_models:\n            model = connector.available_models[0]\n            response = await connector.generate_response(model, \"Hello, this is a test.\")\n            if response:\n                print(f\"‚úì Generation test successful: {response[:100]}...\")\n            else:\n                print(\"‚úó Generation test failed\")\n    else:\n        print(\"‚úó Ollama not connected\")\n        print(\"  Make sure Ollama is running: ollama serve\")\n        print(\"  Install models: ollama pull llama2\")\n    \n    return connected\n\nasync def test_google_ai():\n    \"\"\"Test Google AI connection\"\"\"\n    print(\"\\nTesting Google AI connection...\")\n    \n    # Load settings to get API key\n    settings = load_settings()\n    api_key = settings.get('apis', {}).get('googleAiKey')\n    \n    if not api_key:\n        print(\"‚úó Google AI API key not configured\")\n        print(\"  Set your API key in the settings\")\n        return False\n    \n    connector = SynapseConnector()\n    connector.google_ai_key = api_key\n    \n    connected = await connector.test_google_ai_connection()\n    \n    if connected:\n        print(\"‚úì Google AI API connected\")\n        \n        # Test generation\n        print(\"Testing Google AI generation...\")\n        response = await connector.call_google_ai_api(\"Hello, this is a test.\")\n        if response:\n            print(f\"‚úì Generation test successful: {response[:100]}...\")\n        else:\n            print(\"‚úó Generation test failed\")\n    else:\n        print(\"‚úó Google AI API not connected\")\n        print(\"  Check your API key in settings\")\n    \n    return connected\n\ndef test_claude_code():\n    \"\"\"Test Claude Code CLI\"\"\"\n    print(\"\\nTesting Claude Code CLI...\")\n    \n    # Load settings to get CLI path\n    settings = load_settings()\n    cli_path = settings.get('apis', {}).get('claudeCodePath')\n    \n    connector = ClaudeCodeCLI(cli_path)\n    \n    if connector.is_available():\n        print(f\"‚úì Claude Code CLI found: {connector.cli_path}\")\n        version = connector.get_version()\n        if version:\n            print(f\"  Version: {version}\")\n        \n        # Test command\n        print(\"Testing Claude Code command...\")\n        result = connector.execute_command('--version')\n        if result['success']:\n            print(\"‚úì Command test successful\")\n        else:\n            print(f\"‚úó Command test failed: {result['error']}\")\n    else:\n        print(\"‚úó Claude Code CLI not found\")\n        print(\"  Install Claude Code CLI from https://claude.ai/code\")\n        print(\"  Or set the correct path in settings\")\n    \n    return connector.is_available()\n\nasync def main():\n    \"\"\"Run all connection tests\"\"\"\n    print(\"=\" * 60)\n    print(\"HEARTHLINK CONNECTION TESTS\")\n    print(\"=\" * 60)\n    \n    # Test all connections\n    results = {\n        'ollama': await test_ollama(),\n        'google_ai': await test_google_ai(),\n        'claude_code': test_claude_code()\n    }\n    \n    # Summary\n    print(\"\\n\" + \"=\" * 60)\n    print(\"CONNECTION TEST SUMMARY\")\n    print(\"=\" * 60)\n    \n    for service, connected in results.items():\n        status = \"‚úì Connected\" if connected else \"‚úó Not Connected\"\n        print(f\"{service.upper().replace('_', ' ')}: {status}\")\n    \n    connected_count = sum(results.values())\n    total_services = len(results)\n    \n    print(f\"\\nServices Connected: {connected_count}/{total_services}\")\n    \n    if connected_count == 0:\n        print(\"\\n‚ö†Ô∏è  No services connected. Check the setup instructions.\")\n    elif connected_count < total_services:\n        print(f\"\\n‚ö†Ô∏è  {total_services - connected_count} service(s) not connected.\")\n    else:\n        print(\"\\nüéâ All services connected! Ready for task delegation.\")\n    \n    return results\n\nif __name__ == '__main__':\n    try:\n        results = asyncio.run(main())\n        \n        # If any service is connected, show next steps\n        if any(results.values()):\n            print(\"\\nNext steps:\")\n            print(\"1. Start the services: python start_services.py\")\n            print(\"2. Open Hearthlink: npm run dev\")\n            print(\"3. Use Project Command for task delegation\")\n        \n    except KeyboardInterrupt:\n        print(\"\\nTest interrupted by user.\")\n    except Exception as e:\n        print(f\"\\nTest failed: {e}\")\n        sys.exit(1)"